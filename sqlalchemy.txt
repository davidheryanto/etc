# Version
import sqlalchemy
sqlalchemy.__version__

# Connecting
from sqlalchemy import create_engine
engine = create_engine('sqllite:///:memory:')

# Create mapping and schema -> Declarative system
# Create a base class
from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()

# Create a new class
from sqlalchemy import Column, Integer, String
class User(Base):
	__tablename__ = 'user'

	id = Column(Integer, primary_key=True)
	name = Column(String(50))
	fullname = Column(String)
	password = Column(String)

	def __repr__(self):
		return "<User(name='%s', fullname='%s', password='%s')>" % (self.name, self.fullname, self.password)

# Create an instance
ed_user = User(name='ed', fullname='Ed Jones')

# Session
from sqlalchemy.orm import sessionmaker
Session = sessionmaker(bind=engine)

# Alternatively, when no engine is avilable yet
Session = sessionmaker()
Session.configure(bind=engine) 

# Create a session to talk with database
session = Session()

# Add objects
ed_user = User(name='ed', fullname='Ed Jones', password='edspassword')
session.add(ed_user)
our_user = session.query(User).filter_by(name='ed').first()

# Identity map
ed_user is our_user  # True

# Add multiple users
session.add_all([
	User(name='wendy', fullname='Wendy Williams', password='foobar'),
	User(name='fred', fullname='Fred Flinstone', password='blah')])

# Update objects
ed_user.password = 'f8s7ccs'

# Commit changes
session.dirty
session.new
session.commit()  # After commit ed_user.id will be generated

# Roll back
ed_user.name = 'Edwardo'
fake_user = User(name='fakeuser', fullname='Invalid', password='12345')
session.add(fake_user)
session.query(User).filter(User.name.in_(['Edwardo', 'fakeuser'])).all()  # current transaction
session.rollback()
ed_user.name, fake_user in session
session.query(User).filter(User.name.in_(['ed', 'fakeuser'])).all()

# Querying
for instance in session.query(User).order_by(User.id):
	print(instance.name, instance.fullname)
for name, fullname in session.query(User.name, User.fullname):
	print(name, fullname)
for row in session.query(User, User.name).all():
	print(row.User, row.name)

# Order by and limit
for u in session.query(User).order_by(User.id)[1:3]:
	print(u)

# Filter
for name, in session.query(User.name).filter_by(fullname='Ed Jones'):
	print(name)
for name, in session.query(User.name).filter(User.fullname=='Ed Jones'):  # Use == instead of =
	print(name)
for user in session.query(User).filter(User.name=='ed').filter(User.fullname=='Ed Jones'):
	print(user)

# Filter operators
# Equals
query.filter(User.name == 'ed')
query.filter(User.name != 'ed')
# Like
query.filter(User.name.like('%ed%'))
# In
query.filter(User.name.in_(['ed', 'wendy', 'jack']))
query.filter(User.name.in_(
        session.query(User.name).filter(User.name.like('%ed%'))
))
query.filter(~User.name.in_(['ed', 'wendy', 'jack']))
# Null
query.filter(User.name == None)
# alternatively, if pep8/linters are a concern
query.filter(User.name.is_(None))
query.filter(User.name != None)
# alternatively, if pep8/linters are a concern
query.filter(User.name.isnot(None))
# And
from sqlalchemy import and_
query.filter(and_(User.name == 'ed', User.fullname == 'Ed Jones'))
query.filter(User.name == 'ed', User.fullname == 'Ed Jones')
query.filter(User.name == 'ed').filter(User.fullname == 'Ed Jones')
# Or
from sqlalchemy import or_
query.filter(or_(User.name == 'ed', User.name == 'wendy'))
# Match
query.filter(User.name.match('wendy'))

# Textual sql
session.query(User).from_statement(text("SELECT * FROM users where name=:name")).params(name='ed').all()

 # Counting
 session.query(User).filter(User.name.like('%ed')).count()