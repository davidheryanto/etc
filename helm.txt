# Install helm
wget -qO- https://get.helm.sh/helm-v2.14.3-linux-amd64.tar.gz | tar xz
sudo mv linux-amd64/helm /usr/local/bin/
rm -rf linux-amd64

# Get revision history
helm history myrelease 

# Rollback release, e.g. rollback myrelease to revision number 5
helm rollback myrelease 5

# Upgrade release and automatically rollback on failure
helm upgrade myrelease stable/redis --atomic [--timeout 600]

# Delete and purge release by name
helm delete --purge $(helm list | grep <search_term> | cut -f1 | tr -d '\n' | tr -s ' ')

# List recent 5 releases
helm list --all --date --reverse --max 5

# Helm init for cluster with RBAC
https://helm.sh/docs/using_helm/#tiller-and-role-based-access-control

kubectl apply -f - <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: tiller
    namespace: kube-system
EOF

helm init --service-account tiller --history-max 50

# Alternatively to init without installling Tiller
helm init --service-account tiller --history-max 50 --client-only

# Uninstall tiller 
# https://stackoverflow.com/questions/47583821/how-to-delete-tiller-from-kubernetes-cluster
helm reset [--force]

# To solve this error when running "helm list"
# Error: configmaps is forbidden: User "system:serviceaccount:kube-system:default"
# cannot list resource "configmaps" in API group "" in the namespace "kube-system"
kubectl create clusterrolebinding kubesystem-default-cluster-admin-binding \
  --clusterrole cluster-admin \
  --serviceaccount=kube-system:default

# Using helm v2 with Terraform: how to initialize Tiller
https://github.com/terraform-providers/terraform-provider-helm/issues/148#issuecomment-451529804

# Plugin to upgrade Helm release metadata with deprecated Kubernetes API version
# https://github.com/hickeyma/helm-mapkubeapis
helm plugin install https://github.com/hickeyma/helm-mapkubeapis
helm mapkubeapis --dry-run RELEASE 
helm mapkubeapis --dry-run --v2 RELEASE 
helm mapkubeapis --kube-context CONTEXT --kubeconfig PATH --namespace NS RELEASE 

Useful commands
============================================================
helm create mychart

helm get manifest full-coral

helm install ./mychart

helm upgrade RELEASE_NAME CHART_PATH

# Render the templates w/o installing
helm template myrelease ./mychart [-f myvalues.yaml]

# Render just specific templates
helm template myrelease ./mychart \
  --show-only templates/deployment.yaml --show-only templates/service.yaml 

# Alternatively (requires Tiller on server)
helm install --debug --dry-run ./mychart

# Overriding values
helm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null

# Packaging charts
helm package docs/examples/alpine/
mkdir fantastic-charts
mv alpine-0.1.0.tgz fantastic-charts/

# Create updated index.yaml
# Where 'fantastic-chart' is the folder containing the packaged chart (*.tgz)
helm repo index 'fantastic-charts --url https://fantastic-charts.storage.googleapis.com

# Incrementally add new charts to existing index.yaml
# Where './charts' contains the new packaged charts (*.tgz)
helm repo index --merge /existing/index.yaml ./charts --url https://charts.storage.googleapis.com

helm repo add fantastic-charts https://fantastic-charts.storage.googleapis.com
helm repo list
helm repo update

# Add bitnami helm charts
helm repo add bitnami https://charts.bitnami.com/bitnami
helm search repo bitnami
helm install my-release bitnami/redis

# Dependencies, to update "charts" folder based on requirements.yaml
helm dependency update

# Use local path in requirements.yaml
dependencies:
- name: mychart
  version: 0.1.0
  repository: file://../local/path or file:///root/path

# Try local server
helm serve --repo-path ./charts
