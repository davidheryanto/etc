Using the Client
============================================================

# Connect to db
psql -h 127.0.0.1 -d database_name -U user_name -W 

# Execute command
psql -h 127.0.0.1 -d database_name -U user_name -c "SELECT * FROM table LIMIT 3;"

# Switch db
\c [db_name]

# List databases
\l

# List schema
\dn
select schema_name from information_schema.schemata -- ANSI

# List tables
\dt
# ANSI way by querying information schema
\c mydb
SELECT table_name FROM information_schema.tables WHERE table_schema='public';

# List users
\du

# Quit
\q

# Set schema / search path when performing query
SET search_path TO my_schema 
SET schema to my_schema # Alternatively

# Check current connenction info, e.g. who is current user
# https://stackoverflow.com/questions/39735141/how-to-check-connected-user-on-psql
\conninfo

# Check current database
SELECT current_database();

# Dry run / Test run the sql query -> Use transaction (begin, select, rollback)
# https://stackoverflow.com/questions/9202011/how-to-test-run-an-update-statement-in-postgresql
BEGIN;

UPDATE accounts SET balance = balance - 100.00
  WHERE name = 'Alice';

SELECT accounts WHERE name = 'Alice';

ROLLBACK; -- << Important! Un-does your UPDATE statement above!

# Restart running id sequence (auto-increment) in a table 
ALTER SEQUENCE [SEQ_NAME] RESTART WITH [START_NUMBER];
# E.g.: ALTER SEQUENCE seq RESTART WITH 1;

# Update row
UPDATE [TABLE_NAME] set [COLUMN=VALUE] WHERE [CONDITION]

# Run sql script file
psql -d DB_NAME -h DB_HOST -U DB_USER -f SCRIPT_FILE

# Set default value in a column to a value from query: Must create a function
# https://stackoverflow.com/questions/25378806/set-default-value-in-postrgresql-table-column-to-a-value-from-a-query
> CREATE OR REPLACE FUNCTION id_in_users(iemail varchar) RETURNS int LANGUAGE SQL AS
$$ SELECT id FROM users WHERE email = iemail; $$;

> ALTER TABLE runs ADD COLUMN userId bigint NOT NULL DEFAULT     
id_in_users('admin@example.com');

# Create read only user
# ============================================================
# https://ed.gs/2016/01/12/add-read-only-postgres-user/

psql DATABASE_NAME

CREATE USER reader WITH ENCRYPTED PASSWORD 'mysecretpass';
CREATE DATABASE mydb_1 [OWNER user_1];

GRANT CONNECT ON DATABASE mydb TO reader;
GRANT USAGE ON SCHEMA public TO reader;
GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO reader;
GRANT SELECT ON ALL TABLES IN SCHEMA public to reader;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO reader;

# Create admin user
GRANT CONNECT ON DATABASE mydb TO admin;
GRANT USAGE ON SCHEMA public TO admin;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO admin;
GRANT ALL ON ALL TABLES IN SCHEMA public to admin;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO admin;

# To allow user to create new schema
GRANT CREATE ON DATABASE mydb TO admin;

# To allow user to create database 
ALTER USER admin CREATEDB;

# Delete users
DROP OWNED BY [user]
DROP USER [user]

# If the user has CONNECT privilege, need to revove the permission first before dropping user
REVOKE CONNECT ON DATABASE [mydb] FROM [user]

# Drop all tables
# https://stackoverflow.com/questions/3327312/drop-all-tables-in-postgresql
select 'drop table if exists "' || tablename || '" cascade;' from pg_tables
  where schemaname = 'public'; -- or any other schema
# Alternatively to delete all tables
drop schema public cascade;
create schema public;

# Change user password 
ALTER USER user1 ENCRYPTED PASSWORD 'new_password';

# updated_at / modified_at column with TRIGGER and FUNCTION
# https://stackoverflow.com/questions/1035980/update-timestamp-when-row-is-updated-in-postgresql

CREATE OR REPLACE FUNCTION update_changetimestamp_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.changetimestamp = now(); 
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_ab_changetimestamp 
  BEFORE UPDATE
  ON ab 
  FOR EACH ROW 
EXECUTE PROCEDURE update_changetimestamp_column();

# Trigger when column value is different 
# https://stackoverflow.com/questions/25435669/fire-trigger-on-update-of-columna-or-columnb-or-columnc
CREATE TRIGGER trigger_update_account_details
BEFORE UPDATE ON account_details
FOR EACH ROW
WHEN (OLD.email    IS DISTINCT FROM NEW.email OR 
      OLD.username IS DISTINCT FROM NEW.username OR 
      OLD.password IS DISTINCT FROM NEW.password) 
EXECUTE PROCEDURE notify_insert_account_details();

# Another example of trigger when colum value is different and of certain value
CREATE TRIGGER approve_trigger
  BEFORE UPDATE
  ON travel
  FOR EACH ROW
  WHEN (NEW.is_approved IS DISTINCT FROM OLD.is_approved AND
        NEW.is_approved = TRUE)
EXECUTE PROCEDURE update_approved_at();

# Enum type
CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');

# Add Enum value: https://stackoverflow.com/questions/1771543/postgresql-updating-an-enum-type
ALTER TYPE enum_type ADD VALUE 'new_value'; -- appends to list
ALTER TYPE enum_type ADD VALUE 'new_value' BEFORE 'old_value';
ALTER TYPE enum_type ADD VALUE 'new_value' AFTER 'old_value';

============================================================
Installation on Fedora: https://fedoraproject.org/wiki/PostgreSQL
============================================================
sudo systemctl install postgresql-server postgresql-contrib
postgresql-setup --initdb --unit postgresql

# Password file (for linux)
vim ~/.pgpass
Format:  host:port:database:user:password

# http://www.postgresql.org/download/linux/redhat/
sudo dnf install postgresql-server postgresql-contrib
postgresql-setup initdb
systemctl start postgresql

# Install from source
./configure
make
su
make install
adduser postgres
mkdir /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
su - postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data >logfile 2>&1 &
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test

# https://wiki.postgresql.org/wiki/First_steps
CREATE USER xxx PASSWORD 'yyy';
GRANT ALL ON SCHEMA test TO xxx;
GRANT ALL ON ALL TABLES IN SCHEMA test TO xxx;

ALTER USER xxx WITH SUPERUSER;
ALTER USER xxx WITH NOSUPERUSER;

# Logging in with xxx
/usr/local/pgsql/bin/psql -U xxx -h <host> -W -d <dbname>

# Compile adminpack at postgresql-9.4.7/contrib/adminpack
CREATE EXTENSION adminpack;

# http://www.cyberciti.biz/tips/postgres-allow-remote-access-tcp-connection.html
vim /usr/local/pgsql/data/pg_hba.conf  # Or /var/lib/pgsql/data/pg_hba.conf
host all all 10.10.29.0/24 md5

vim /usr/local/pgsql/data/postgresql.conf  # Or /var/lib/pgsql/data/postgresql.conf
listen_addresses='*'

# https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-centos-7

# Optimize insert
http://stackoverflow.com/questions/12206600/how-to-speed-up-insertion-performance-in-postgresql

# Extensions from citusdata
git clone https://github.com/citusdata/pg_shard.git --depth=1
git clone https://github.com/citusdata/cstore_fdw.git --depth=1

sudo dnf -y install protobuf-c-devel

PATH=/usr/local/pgsql/bin/:$PATH make
sudo PATH=/usr/local/pgsql/bin/:$PATH make install

vim /usr/local/pgsql/data/postgresql.conf
shared_preload_libraries = 'pg_shard, cstore_fdw'

vim $PGDATA/pg_worker_list.conf
# hostname port-number
worker-101  5432
worker-102  5432

CREATE EXTENSION pg_shard;
CREATE EXTENSION cstore_fdw;
CREATE SERVER cstore_server FOREIGN DATA WRAPPER cstore_fdw;

# postgresql.conf for performance only
# https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server
shared_buffers = 0.25 * RAM
effective_cache_size = 0.75 * RAM
checkpoint_segments = 48
checkpoint_completion_target = 0.75
autovacuum = off  # Only when loading data
work_mem = 512MB  # How much used memory used for sort etc
synchronous_commit = off  # Ok for small data loss, for performance boost


Useful Postgres Queries and Commands
============================================================


Print all indexes
------------------------------------------------------------

https://stackoverflow.com/questions/6777456/list-all-index-names-column-names-and-its-table-name-of-a-postgresql-database

SELECT i.relname as indname,
       i.relowner as indowner,
       idx.indrelid::regclass,
       am.amname as indam,
       idx.indkey,
       ARRAY(
       SELECT pg_get_indexdef(idx.indexrelid, k + 1, true)
       FROM generate_subscripts(idx.indkey, 1) as k
       ORDER BY k
       ) as indkey_names,
       idx.indexprs IS NOT NULL as indexprs,
       idx.indpred IS NOT NULL as indpred
FROM   pg_index as idx
JOIN   pg_class as i
ON     i.oid = idx.indexrelid
JOIN   pg_am as am
ON     i.relam = am.oid
JOIN   pg_namespace as ns
ON     ns.oid = i.relnamespace
AND    ns.nspname = ANY(current_schemas(false));


https://gist.github.com/rgreenjr/3637525
------------------------------------------------------------

-- show running queries (pre 9.2)
SELECT procpid, age(query_start, clock_timestamp()), usename, current_query 
FROM pg_stat_activity 
WHERE current_query != '<IDLE>' AND current_query NOT ILIKE '%pg_stat_activity%' 
ORDER BY query_start desc;

-- show running queries (9.2)
SELECT pid, age(query_start, clock_timestamp()), usename, query 
FROM pg_stat_activity 
WHERE query != '<IDLE>' AND query NOT ILIKE '%pg_stat_activity%' 
ORDER BY query_start desc;

-- kill running query
SELECT pg_cancel_backend(procpid);

-- kill idle query
SELECT pg_terminate_backend(procpid);

-- vacuum command
VACUUM (VERBOSE, ANALYZE);

-- all database users
select * from pg_stat_activity where current_query not like '<%';

-- all databases and their sizes
select * from pg_user;

-- all tables and their size, with/without indexes
select datname, pg_size_pretty(pg_database_size(datname))
from pg_database
order by pg_database_size(datname) desc;

-- cache hit rates (should not be less than 0.99)
SELECT sum(heap_blks_read) as heap_read, sum(heap_blks_hit)  as heap_hit, (sum(heap_blks_hit) - sum(heap_blks_read)) / sum(heap_blks_hit) as ratio
FROM pg_statio_user_tables;

-- table index usage rates (should not be less than 0.99)
SELECT relname, 100 * idx_scan / (seq_scan + idx_scan) percent_of_times_index_used, n_live_tup rows_in_table
FROM pg_stat_user_tables 
ORDER BY n_live_tup DESC;

-- how many indexes are in cache
SELECT sum(idx_blks_read) as idx_read, sum(idx_blks_hit)  as idx_hit, (sum(idx_blks_hit) - sum(idx_blks_read)) / sum(idx_blks_hit) as ratio
FROM pg_statio_user_indexes;

-- Dump database on remote host to file
$ pg_dump -h hostname -U username databasename > dump.sql

-- Dump database without owner (sometimes it's easier to restore such dump)
$ pg_dump --no-owner -h hostname -U username databasename > dump.sql

-- Dump only specific tables
-- https://stackoverflow.com/questions/7359827/creating-a-database-dump-for-specific-tables-and-entries-postgres

$ pg_dump --no-owner -h hostname -U username \
-t "^pattern2*" -t "^pattern1*" databasename > dump.sql

-- Restore dump into existing database
$ psql -h dbhost -d emptydb -U dbuser -f dump.sql

# Disk space used by all tables
# https://stackoverflow.com/questions/21738408/postgresql-list-and-order-tables-by-size
SELECT
  table_schema,
  table_name,
  pg_size_pretty(pg_relation_size('"' || table_schema || '"."' || table_name || '"'))
FROM information_schema.tables
ORDER BY 3;

# Disk space used by all tables in a schema
SELECT
  table_name,
  pg_size_pretty(pg_relation_size(quote_ident(table_name)))
FROM information_schema.tables
WHERE table_schema = 'public'
ORDER BY 2;

# Enable log rotation: postgresql.conf
# Store 7 days worth of log
# https://www.postgresql.org/docs/9.2/static/runtime-config-logging.html#RUNTIME-CONFIG-LOGGING-WHERE
log_filename = 'server_log.%a'
log_truncate_on_rotation = on
log_rotation_age = 1440

# Random, number only primary key
https://stackoverflow.com/questions/20890129/postgresql-random-primary-key
https://wiki.postgresql.org/wiki/Pseudo_encrypt

# Rename database
ALTER DATABASE people RENAME TO customers;

Client Application Sample
============================================================

Python
------------------------------------------------------------
import psycopg2
import psycopg2.extras

conn_string = "host='localhost' dbname='my_database' user='postgres' password='secret'"
conn_string = "host='localhost' port=5432 dbname='my_database' user='postgres' password='secret'"

try:
    conn = psycopg2.connect(conn_string)
except Exception as e:
    print('I am unable to connect to the database')
    print(e)


cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

Application Level Locking
============================================================
http://www.practiceovertheory.com/blog/2013/07/06/distributed-locking-in-postgres/

Slave DB
============================================================

Prevent hot standby error
------------------------------------------------------------
- canceling statement due to conflict with recovery

hot_standby_feedback = on

Possibly this is better, so it doesn't bloat the master:
- max_standby_streaming_delay = -1

Ref:
- https://www.postgresql.org/docs/9.6/static/runtime-config-replication.html
- https://www.reddit.com/r/PostgreSQL/comments/4lg6k9/long_queries_on_postgresql_hot_standy/
- https://youtu.be/OzoyRv_7fEk?t=26m4s

# Example connection string
postgresql://scott:tiger@localhost:5432/mydatabase

# Reserved key words
https://www.postgresql.org/docs/current/static/sql-keywords-appendix.html