Using the Client
============================================================

# Connect to db
psql -h 127.0.0.1 -d database_name -U user_name -W 

# Switch db
\c [db_name]

# List databases
\l

# List schema
\dn
select schema_name from information_schema.schemata -- ANSI

# List tables
\dt
# ANSI way by querying information schema
\c mydb
SELECT table_name FROM information_schema.tables WHERE table_schema='public';

# List users
\du

# Quit
\q

# Check current connenction info, e.g. who is current user
# https://stackoverflow.com/questions/39735141/how-to-check-connected-user-on-psql
\conninfo

# Check current database
SELECT current_database();

# Create read only user
# ============================================================
# https://ed.gs/2016/01/12/add-read-only-postgres-user/

psql DATABASE_NAME

CREATE USER reader WITH ENCRYPTED PASSWORD 'mysecretpass';
CREATE DATABASE mydb_1 [OWNER user_1];

GRANT CONNECT ON DATABASE mydb TO reader;
GRANT USAGE ON SCHEMA public TO reader;
GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO reader;
GRANT SELECT ON ALL TABLES IN SCHEMA public to reader;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO reader;

# Create admin user
GRANT CONNECT ON DATABASE mydb TO admin;
GRANT USAGE ON SCHEMA public TO admin;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO admin;
GRANT ALL ON ALL TABLES IN SCHEMA public to admin;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO admin;

# Delete users
DROP OWNED BY [user]
DROP USER [user]

# Change user password 
ALTER USER user1 ENCRYPTED PASSWORD 'new_password';

# updated_at / modified_at column with TRIGGER and FUNCTION
# https://stackoverflow.com/questions/1035980/update-timestamp-when-row-is-updated-in-postgresql

CREATE OR REPLACE FUNCTION update_changetimestamp_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.changetimestamp = now(); 
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_ab_changetimestamp BEFORE UPDATE
ON ab FOR EACH ROW EXECUTE PROCEDURE 
update_changetimestamp_column();


============================================================
Installation on Fedora: https://fedoraproject.org/wiki/PostgreSQL
============================================================
sudo systemctl install postgresql-server postgresql-contrib
postgresql-setup --initdb --unit postgresql

# Password file (for linux)
vim ~/.pgpass
Format:  host:port:database:user:password

# http://www.postgresql.org/download/linux/redhat/
sudo dnf install postgresql-server postgresql-contrib
postgresql-setup initdb
systemctl start postgresql

# Install from source
./configure
make
su
make install
adduser postgres
mkdir /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
su - postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data >logfile 2>&1 &
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test

# https://wiki.postgresql.org/wiki/First_steps
CREATE USER xxx PASSWORD 'yyy';
GRANT ALL ON SCHEMA test TO xxx;
GRANT ALL ON ALL TABLES IN SCHEMA test TO xxx;

ALTER USER xxx WITH SUPERUSER;
ALTER USER xxx WITH NOSUPERUSER;

# Logging in with xxx
/usr/local/pgsql/bin/psql -U xxx -h <host> -W -d <dbname>

# Compile adminpack at postgresql-9.4.7/contrib/adminpack
CREATE EXTENSION adminpack;

# http://www.cyberciti.biz/tips/postgres-allow-remote-access-tcp-connection.html
vim /usr/local/pgsql/data/pg_hba.conf  # Or /var/lib/pgsql/data/pg_hba.conf
host all all 10.10.29.0/24 md5

vim /usr/local/pgsql/data/postgresql.conf  # Or /var/lib/pgsql/data/postgresql.conf
listen_addresses='*'

# https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-centos-7

# Optimize insert
http://stackoverflow.com/questions/12206600/how-to-speed-up-insertion-performance-in-postgresql

# Extensions from citusdata
git clone https://github.com/citusdata/pg_shard.git --depth=1
git clone https://github.com/citusdata/cstore_fdw.git --depth=1

sudo dnf -y install protobuf-c-devel

PATH=/usr/local/pgsql/bin/:$PATH make
sudo PATH=/usr/local/pgsql/bin/:$PATH make install

vim /usr/local/pgsql/data/postgresql.conf
shared_preload_libraries = 'pg_shard, cstore_fdw'

vim $PGDATA/pg_worker_list.conf
# hostname port-number
worker-101  5432
worker-102  5432

CREATE EXTENSION pg_shard;
CREATE EXTENSION cstore_fdw;
CREATE SERVER cstore_server FOREIGN DATA WRAPPER cstore_fdw;

# postgresql.conf for performance only
# https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server
shared_buffers = 0.25 * RAM
effective_cache_size = 0.75 * RAM
checkpoint_segments = 48
checkpoint_completion_target = 0.75
autovacuum = off  # Only when loading data
work_mem = 512MB  # How much used memory used for sort etc
synchronous_commit = off  # Ok for small data loss, for performance boost


Useful Postgres Queries and Commands
============================================================


Print all indexes
------------------------------------------------------------

https://stackoverflow.com/questions/6777456/list-all-index-names-column-names-and-its-table-name-of-a-postgresql-database

SELECT i.relname as indname,
       i.relowner as indowner,
       idx.indrelid::regclass,
       am.amname as indam,
       idx.indkey,
       ARRAY(
       SELECT pg_get_indexdef(idx.indexrelid, k + 1, true)
       FROM generate_subscripts(idx.indkey, 1) as k
       ORDER BY k
       ) as indkey_names,
       idx.indexprs IS NOT NULL as indexprs,
       idx.indpred IS NOT NULL as indpred
FROM   pg_index as idx
JOIN   pg_class as i
ON     i.oid = idx.indexrelid
JOIN   pg_am as am
ON     i.relam = am.oid
JOIN   pg_namespace as ns
ON     ns.oid = i.relnamespace
AND    ns.nspname = ANY(current_schemas(false));


https://gist.github.com/rgreenjr/3637525
------------------------------------------------------------

-- show running queries (pre 9.2)
SELECT procpid, age(query_start, clock_timestamp()), usename, current_query 
FROM pg_stat_activity 
WHERE current_query != '<IDLE>' AND current_query NOT ILIKE '%pg_stat_activity%' 
ORDER BY query_start desc;

-- show running queries (9.2)
SELECT pid, age(query_start, clock_timestamp()), usename, query 
FROM pg_stat_activity 
WHERE query != '<IDLE>' AND query NOT ILIKE '%pg_stat_activity%' 
ORDER BY query_start desc;

-- kill running query
SELECT pg_cancel_backend(procpid);

-- kill idle query
SELECT pg_terminate_backend(procpid);

-- vacuum command
VACUUM (VERBOSE, ANALYZE);

-- all database users
select * from pg_stat_activity where current_query not like '<%';

-- all databases and their sizes
select * from pg_user;

-- all tables and their size, with/without indexes
select datname, pg_size_pretty(pg_database_size(datname))
from pg_database
order by pg_database_size(datname) desc;

-- cache hit rates (should not be less than 0.99)
SELECT sum(heap_blks_read) as heap_read, sum(heap_blks_hit)  as heap_hit, (sum(heap_blks_hit) - sum(heap_blks_read)) / sum(heap_blks_hit) as ratio
FROM pg_statio_user_tables;

-- table index usage rates (should not be less than 0.99)
SELECT relname, 100 * idx_scan / (seq_scan + idx_scan) percent_of_times_index_used, n_live_tup rows_in_table
FROM pg_stat_user_tables 
ORDER BY n_live_tup DESC;

-- how many indexes are in cache
SELECT sum(idx_blks_read) as idx_read, sum(idx_blks_hit)  as idx_hit, (sum(idx_blks_hit) - sum(idx_blks_read)) / sum(idx_blks_hit) as ratio
FROM pg_statio_user_indexes;

-- Dump database on remote host to file
$ pg_dump -U username -h hostname databasename > dump.sql

-- Import dump into existing database
$ psql -d newdb -f dump.sql


Client Application Sample
============================================================

Python
------------------------------------------------------------
import psycopg2

conn_string = "host='localhost' dbname='my_database' user='postgres' password='secret'"
conn_string = "host='localhost' port=5432 dbname='my_database' user='postgres' password='secret'"

try:
    conn = psycopg2.connect(conn_string)
except Exception as e:
    print('I am unable to connect to the database')
    print(e)


cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

Application Level Locking
============================================================
http://www.practiceovertheory.com/blog/2013/07/06/distributed-locking-in-postgres/

Slave DB
============================================================

Prevent hot standby error
------------------------------------------------------------
- canceling statement due to conflict with recovery

hot_standby_feedback = on

Possibly this is better, so it doesn't bloat the master:
- max_standby_streaming_delay = -1

Ref:
- https://www.postgresql.org/docs/9.6/static/runtime-config-replication.html
- https://www.reddit.com/r/PostgreSQL/comments/4lg6k9/long_queries_on_postgresql_hot_standy/
- https://youtu.be/OzoyRv_7fEk?t=26m4s