# Load python file
%load filename.py

# Auto reload module
 %load_ext autoreload
 %autoreload 2

# Put it in profile
c.InteractiveShellApp.exec_lines = []
c.InteractiveShellApp.exec_lines.append('%load_ext autoreload')
c.InteractiveShellApp.exec_lines.append('%autoreload 2')

# Launch ipython qtconsole
http://stackoverflow.com/questions/21295132/start-ipython-qtconsole-als-interactive-interpreter-after-script-execution
cd IPython/scripts
ipython qtconsole
ipython qtconsole --pylab  # Enable interactive plotting
ipython qtconsole -m myscript  # Launch module
--ConsoleWidget.font_size=10   # Option in shortcut

# Show doscstring
http://stackoverflow.com/questions/22850566/function-name-tab-does-not-return-docstring-in-ipython
Shift + Tab

# Running public notebook server, so can access remotely
# http://jupyter-notebook.readthedocs.org/en/latest/public_server.html
------------------------------------------
# Create profile
++++++++++++++++
jupyter notebook --generate-config

# Generate password
+++++++++++++++++++
from notebook.auth import passwd
passwd()

# Edit ipython_notebook_config.py
# vim ~/.jupyter/jupyter_notebook_config.py
+++++++++++++++++++++++++++++++++
# Set options for certfile, ip, password, and toggle off browser auto-opening
# c.NotebookApp.certfile = u'/absolute/path/to/your/certificate/mycert.pem'
# c.NotebookApp.keyfile = u'/absolute/path/to/your/certificate/mykey.key'
# Set ip to '*' to bind on all interfaces (ips) for the public server
c.NotebookApp.ip = '*'
c.NotebookApp.password = u'sha1:bcd259ccf...'
c.NotebookApp.open_browser = False

# It is a good idea to set a known, fixed port for server access
c.NotebookApp.port = 9999
-------------------------------------------

# Check config path
import IPython
IPython.config.get_config()

# vim ~/.ipython/profile_default/ipython_config.py
c = get_config()
c.InteractiveShellApp.exec_lines = [
    'import numpy as np',
    'import matplotlib.pyplot as plt',
    'import pylab',
    '%matplotlib inline',
]
c.NotebookApp.open_browser = False

# Change the style and look of iPython notebook
# OLD: vim /home/davidheryanto/.ipython/profile_default/static/custom/custom.css
vim /home/davidheryanto/.jupyter/custom/custom.css
pre {
    font-family: "Consolas" !important;
    font-size: 14px !important;
}
#notebook-container {
    width: 100%;
}
.smalltooltip {
    height: 300px;
}
.bigtooltip {
    height: 300px;
}

# Hide header and toolbar by default
vim ~/.ipython/profile_default/static/custom/custom.js
$([IPython.events]).on("app_initialized.NotebookApp", function () {
    $('#header-container').hide();
    $('#menubar').hide();

    IPython.toolbar.add_buttons_group([
    {
        'label'   : 'Hide header',
        'icon'    : 'fa-arrows-v', // http://fortawesome.github.io/Font-Awesome/icons
        'callback': function () {
            jQuery('#header-container').toggle();
            jQuery('#menubar').toggle();
        }
    }
    ]);
});

# Parallel
# http://ipython.org/ipython-doc/dev/parallel/parallel_process.html#parallel-process
ipython profile create --parallel --profile=ssh
ipcluster start --profile=ssh

# Clear output
from IPython.display import display, clear_output
clear_output(wait=True)

# Convert ipynb, format can be html, python, latex, slides, markdown
ipython nbconvert --to FORMAT notebook.ipynb

# Create new profile for running public notebook server
ipython profile create nbserver

# Sample notebook config for ipython server
vim ~/.ipython/profile_nbserver/ipython_config.py
c = get_config()
c.InteractiveShellApp.exec_lines = [
    'import numpy as np',
    'import matplotlib.pyplot as plt',
    'import pylab',
    '%matplotlib inline',
]
c.NotebookApp.ip = '*'
c.NotebookApp.open_browser = False
# c.NotebookApp.password = 'sha1:12312:9680055cdbf2b108b57f52c4fe81fe74864dfb2a'
c.NotebookApp.port = 9999

# Starting the public notebook 
ipython notebook --profile=nbserver

# Interactive table
import qgrid
import pandas as pd
import numpy as np
from pandas.io.data import get_data_yahoo

pd.set_option('display.max_rows', 8)
spy = get_data_yahoo(
    symbols='SPY',
    start=pd.Timestamp('2011-01-01'),
    end=pd.Timestamp('2014-01-01'),
    adjust_price=True,
)

qgrid.nbinstall(overwrite=True)
qgrid.set_defaults(remote_js=True, precision=4)
qgrid.show_grid(spy)