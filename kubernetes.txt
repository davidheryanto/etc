===========
Extra Info
===========
https://deis.com/blog/2016/kubernetes-illustrated-guide/

============================================================
					    Cheat Sheet
https://kubernetes.io/docs/user-guide/kubectl-cheatsheet/
============================================================

kubectl create -f ./my1.yaml -f ./my2.yaml
kubectl create -f ./dir

============================================================

minikube version
minikube start

kubectl version
kubectl cluster-info
kubectl get nodes

kubectl run
kubectl run kubernetes-bootcamp --image=docker.io/jocatalin/kubernetes-bootcamp:v1 --port=8080
kubectl get deployments

kubectl proxy

kubectl get pods
kubectl describe pods

kubectl logs $POD_NAME

kubectl exec $POD_NAME env
kubectl exec -ti $POD_NAME bash

kubectl config view

kubectl get namespaces --show-labels

kubectl port-forward POD_NAME 8080:8080


Setting namespace to config
------------------------------------------------------------

https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/

kubectl config set-context $(kubectl config current-context) --namespace=<insert-namespace-name-here>
# Validate it
kubectl config view | grep namespace:


Flow
============================================================
kubectl delete deployments/DEPLOYMENT_NAME services/SERVICE_NAME
kubectl create -f DEPLOYMENT_SERVICE_YAML


Services
=========================================
- Match by labels and selectors
  e.g. 
  - dev, test, production labels
  - version, tags

kubectl get services
kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
kubectl describe services/kubernetes-bootcamp

kubectl expose deployment hello-node --type=LoadBalancer
kubectl get services
# To access on minikube: minikube service hello-node

Using labels
------------
kubectl get deployments
kubectl describe deployment
kubectl get pods -l run=kubernetes-bootcamp
kubectl get services -l run=kubernetes-bootcamp

Applying label
--------------
kubectl label pod $POD_NAME app=v1
kubectl get pods -l app=v1

Deleting services
=========================================
kubectl delete service -l run=kubernetes-bootcamp
kubectl get services

Scaling
============================================================
- By setting no of replicas

# Check the desired, current, available pods
kubectl get deployments

kubectl scale deployments/kubernetes-bootcamp --replicas=4

kubectl get pods -o wide
kubectl describe deployments/kubernetes-bootcamp

Load balancing
--------------
kubectl describe services/kubernetes-bootcamp
# Can check that requests to $HOST:$PORT are handled by different pods

Updating
============================================================
Rolling updates
- Update an application (container image update)
- Rollback
- CI and CD (zero downtime)

kubectl get deployments
kubectl get pods
kubectl describe pods

kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2

kubectl get pods  # See update status
curl $HOST:$PORT  # Check that it's new version
kubectl rollout status deployments/kubernetes-bootcamp  # Alternatively, to check

Rolling back
------------
kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v10  # Update to non-existent version
kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v1  # Rollback

Logging
============================================================
kubectl logs [-f] $POD_NAME

Deleting
============================================================
kubectl delete service hello-node
kubectl delete deployment hello-node

Cleanup
-------
kubectl delete pods healthy-monolith monolith secure-monolith
kubectl delete services monolith auth frontend hello
kubectl delete deployments auth frontend hello
kubectl delete secrets tls-certs
kubectl delete configmaps nginx-frontend-conf nginx-proxy-conf



============================================================
				   Minikube
============================================================
eval $(minikube docker-env)  # Use docker daemon
eval $(minikube docker-env -u)  # Stop using


============================================================
						Udacity
============================================================

Provision kubernetes cluster
----------------------------
gcloud container clusters create k0 

kubectl create -f pods/monolith.yaml
kubectl get pods
kubectl describe pods monolith

kubectl port-forward monolith 10080:80
kubectl logs monolith
kubectl exec monolith --stdin --tty -c monolith /bin/sh

- Readiness
- Liveness: restart container

  readinessProbe:
    httpGet:
      path: /readiness
      port: 81
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 1

  livenessProbe:
    httpGet:
      path: /healthz
      port: 81
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5


Secrets & Configmaps
----------------------
kubectl create secret generic tls-certs --from-file=tls/
kubectl describe secrets tls-certs  # Verify

kubectl create configmap nginx-proxy-conf --from-file=nginx/proxy.conf
kubectl describe configmap nginx-proxy-conf  # More details

Service discovery
------------------
spec:
  selector:
    app: "monolith"
    secure: "enabled"
  ports:
    - protocol: "TCP"
      port: 443
      targetPort: 443
      nodePort: 31000
  type: NodePort

kubectl create -f services/monolith.yaml 
gcloud compute firewall-rules create allow-monolith-nodeport --allow=tcp:31000
gcloud compute instances list

# Troubleshoot endpoints not available
kubectl get pods -l "app=monolith"
kubectl get pods -l "app=monolith,secure=enabled"

# Check pod label
kubectl describe pods secure-monolith | grep Labels
# Add pod label
kubectl label pods secure-monolith "secure=enabled"

Deployment
----------
kubectl create -f deployments/hello.yaml

kubectl create -f deployments/auth.yaml
kubectl describe deployments auth
kubectl create -f services/auth.yaml
kubectl create -f services/hello.yaml

kubectl create configmap nginx-frontend-conf --from-file=nginx/frontend.conf
kubectl create -f deployments/frontend.yaml 
kubectl create -f services/frontend.yaml
kubectl get service frontend

# Remember to open port at the external firewall

Scaling
-------
kubectl get replicasets
vim deployments/hello.yaml  # Increment value of replicas
kubectl apply -f deployments/hello.yaml
kubectl get replicasets

Rolling update
--------------
vim deployments/auth.yaml  # Update image to version 2.0.0
kubectl apply -f deployments/auth.yaml

Adding secrets
------------------------------------------------------------
# For imagePullSecrets in pod.yaml
kubectl create secret docker-registry image-pull-secret --docker-server "https://asia.gcr.io" --docker-username _json_key --docker-email not@val.id --docker-password="$(cat service-account-one-liner.json)"