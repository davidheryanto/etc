# ADB and Fastboot binary from Google
# https://www.xda-developers.com/google-releases-separate-adb-and-fastboot-binary-downloads/
# Windows
https://dl.google.com/android/repository/platform-tools-latest-windows.zip
# Linux
https://dl.google.com/android/repository/platform-tools-latest-linux.zip

# Nexus 6P Angler How-To (Unlock bootleader, install custom recovery etc)
https://forum.xda-developers.com/nexus-6p/general/guides-how-to-guides-beginners-t3206928
# Root with Magisk, needed so that Stock Android does not replace TWRP recovery with stock
https://forum.xda-developers.com/apps/magisk/official-magisk-v7-universal-systemless-t3473445
# Xposed Framework
https://forum.xda-developers.com/showthread.php?t=3034811

# Linux: Android Studio, typical folder location of adb binary
~/Android/Sdk/platform-tools/

# Check devices connected
adb devices

# Find My Device
android.com/find

# Adb copy files
adb push lineageos.zip /

# Start in Fastboot
adb reboot bootloader
# Unlock the bootloader 
fastboot flashing unlock 
# For old devices:
fastboot oem unlock

# Flash TWRP recovery
fastboot flash recovery twrp.img

# Boot into recovery
# https://android.stackexchange.com/questions/201212/how-can-i-reboot-into-recovery-from-fastboot
fastboot boot recovery.img

# Start in recovery e.g. TWRP
adb reboot recovery

# Factory reset with TWRP
Wipe > Advanced Wipe > Tick [Data, Cache, Dalvik Cache]

# scrcpy: Display and control your Android device (like Vysor but free, open source)
# https://github.com/Genymobile/scrcpy
# Example Fedora 42
# Add rpmfusion repo: to install ffpmeg
sudo dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
# Add repo that contains scrcpy
sudo dnf copr enable zeno/scrcpy
sudo dnf install scrcpy
#
# Example command
scrcpy --video-codec=h265 -m1280 --max-fps=60 --no-audio -K --stay-awake

App Component
=============
- Activities
- Services
- Content providers

Intent
=======
- Component name; w/o becomes implicit
- Action (str generic action to perform)
  - Action constants
    ACTION_VIEW, ACTION_SEND
- Data
  The Uri that references data to be acted upon
  ACTION_EDIT
  setDataAndType()
- Extra
  Bundle

Pending Intent
===============
Grand permission to foreign app to use the contained Intent as if it were executed from the app itself

Intent object is handled by: Activity, Service or BroadcastReceiver 

Lifecycle
=========
Application
-------------
onCreate()
onLowMemory()
onTrimMemory()
onTerminate()
onConfigurationChanged()

Content Provider
----------------

Activity
----------
Running, Paused, Stopped, Killed

onCreate(), onResume(), onPause(), onStop()

onSaveInstanceState() -> onRestoreInstanceState()
Bundle() - Parcelable()

# How check app private files
$ C:\Users\david\AppData\Local\Android\sdk\platform-tools\adb shell
$ run-as com.gtt.android.androidsms
$ ls files

# Access terminal
adb shell
# as root
adb root
adb shell
# Remount files after enabling root access (to refresh permission)
adb remount


===============================
Resources: Tutorial and recipes
===============================
Reddit:
- https://www.reddit.com/r/learnprogramming/comments/3wwsge/android_best_bookstutorialsresources_for_learning/

Books:
- The Big Nerd Ranch 

Links:
- https://commonsware.com/Android/ (Busy Coder's Guide to Android Dev)
  https://github.com/commonsguy/cw-omnibus (Source code)


Sign Android Application
============================================================
# https://stackoverflow.com/questions/10930331/how-to-sign-an-already-compiled-apk
keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore my_application.apk alias_name

Pull apk from device
============================================================
adb shell pm list packages | grep -i carousell
adb shell pm path com.thecarousell.Carousell
adb pull /data/app/com.thecarousell.Carousell-1/base.apk carousell.apk

# Check apk build version with Android Asset Packaging Tool (AAPT)
# https://stackoverflow.com/questions/24978264/find-versionnumber-and-versioncode-of-apk-generated-by-android-studio
# Usually at $HOME/Android/Sdk/build-tools/<api_version>
aapt dump badging my_app.apk

# Move certificate from personal to system store
# https://gist.github.com/pwlin/8a0d01e6428b7a96e2eb?permalink_comment_id=3499340#gistcomment-3499340
mkdir -m 700 /data/local/tmp/certs
cp /system/etc/security/cacerts/* /data/local/tmp/certs
mount -t tmpfs tmpfs /system/etc/security/cacerts
mv /data/local/tmp/certs/* /system/etc/security/cacerts/
# After manually add the CA cert from Settings, it will appear in /data/misc/user/0/cacerts-added/
mv /data/misc/user/0/cacerts-added/* /system/etc/security/cacerts/ 
# Update the perms & selinux context labels, so everything is as readable as before
chown root:root /system/etc/security/cacerts/*
chmod 644 /system/etc/security/cacerts/*
chcon u:object_r:system_file:s0 /system/etc/security/cacerts/*
