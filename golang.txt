Initial Setup - Installing Golang
============================================================
wget -qO- https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz | tar xzf - \
&& sudo mv go /usr/local/ \
&& mkdir -p $HOME/go/bin \
&& cat <<EOF >> ~/.bashrc

# Golang environment: GOPATH is path to local packages, GOROOT is home path to compiler/tools
# https://golang.org/doc/code.html#GOPATH
# https://stackoverflow.com/questions/7970390/what-should-be-the-values-of-gopath-and-goroot
export GOPATH=$HOME/go
export GOROOT=/usr/local/go
export PATH=\$PATH:\$GOROOT/bin:\$GOPATH/bin
EOF

# Install dep tool
curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh

# Install dependencies for a project
# https://stackoverflow.com/questions/32758235/how-to-get-all-dependency-files-for-a-program-using-golang
go get -d -v ./...

# Goroutines example
https://nathanleclaire.com/blog/2014/02/15/how-to-wait-for-all-goroutines-to-finish-executing-before-continuing/
cmd := exec.Command("find", "/", "-maxdepth", "1", "-exec", "wc", "-c", "{}", "\\")
var out bytes.Buffer
var stderr bytes.Buffer
cmd.Stdout = &out
cmd.Stderr = &stderr
err := cmd.Run()
if err != nil {
    fmt.Println(fmt.Sprint(err) + ": " + stderr.String())
    return
}
fmt.Println("Result: " + out.String())

# Tour of Go offline
go tool tour

# Run shell command and get the error message
# https://stackoverflow.com/questions/18159704/how-to-debug-exit-status-1-error-when-running-exec-command-in-golang

Flow control
============================================================
- Switch
switch os := runtime.GOOS; os {
case "darwin":
    fmt.Println("OS X.")
case "linux":
    fmt.Println("Linux.")
default:
    // freebsd, openbsd,
    // plan9, windows...
    fmt.Printf("%s.", os)
}

- Switch with no condition = same as switch true
  Clean way to write long if-then-else chains
t := time.Now()
switch {
case t.Hour() < 12:
    fmt.Println("Good morning!")
case t.Hour() < 17:
    fmt.Println("Good afternoon.")
default:
    fmt.Println("Good evening.")
}

Functions
============================================================
// Package fmt implements formatted I/O.
package fmt

func Println(a ...interface{}) (n int, err error) {
    ...
}

Arrays
============================================================
var a [2]string
a[0] = "Hello"
a[1] = "World"

Slice
============================================================
primes := [6]int{2, 3, 5, 7, 11, 13}
var s []int = primes[1:4]

s := []int{2, 3, 5, 7, 11, 13}

# Creating a slice with make
a := make([]int, 5)

# Appending 
s = append(s, 23)

Maps
============================================================
m := make(map[string]int)

# Insert or update
m[key] = elem

# Iterate
for k, v := range m {
    fmt.Println("key:", k, "value:", v)
}

# Delete
delete(m, key)

# Test if key is present. Ok true/false
elem, ok  = m[key]
elem, ok := m[key]

Method: function with receiver
============================================================
Why choose pointer receiver:
- Method can MODIFY the value the receiver points to
- Avoid COPYING the value on each method call

Interface: set of method signatures
============================================================
- Hold any value that implements the methods
- Interfaces are implemented IMPLICITLY (for decoupling: implementation in ANY package)

type Abser interface {
    Abs() float64
}

# Empty interface: for handling values of "unknown" type
interface{}

# Common interface
type Stringer interface {
    String() string
}

type error interface {
    Error() string
}

# Custom error example
type MyError struct {
  When time.Time
  What string
}

func (e *MyError) Error() string {
  return fmt.Sprintf("at %v, %s",
    e.When, e.What)
}

# How to write function that returns a generic error object
# Use errors.New("This is my error message")

Type assertion
============================================================
# Assert that i holds concrete type T, then assign T value to t
t := i.(T)
# Test whether an interface value holds a specific type
t, ok := i.(T)

# Example
var i interface{} = "hello"
s := i.(string)
fmt.Println(s)
s, ok := i.(string)
fmt.Println(s, ok)

# Type switches
switch v := i.(type) {
case T:
    // here v has type T
case S:
    // here v has type S
default:
    // no match; here v has the same type as i
}

Goroutine
============================================================
# Declares and anonymous func and executes it as a goroutine
go func() {
    fmt.Println("Inside a goroutine")
}()

# Yields to the scheduler: means execution can pause and finish the goroutine
runtime.Gosched()

# Better solution for many goroutines
sync.WaitGroup

Channels
============================================================
ch <- val    // Send val to channel ch
val := <-ch  // Receive from ch and assign value to val

ch := make(chan int)

# By default, sends and receives block until the other side is ready
# Hence, goroutines can synchronize without explicit locks

# Buffered channels
ch := make(chan int, 2)
ch <- 1
ch <- 2
fmt.Println(<-ch)
fmt.Println(<-ch)

# Range and close
v, ok := <-ch  # ok is false when no more values to receive and channel is closed

# receives values from the channel repeatedly until it is closed
for i := range c  

# only the sender should close a channel

# capacity of a channel
cpa(c)  

# Example
func fibonacci(n int, c chan int) {
    x, y := 0, 1
    for i := 0; i < n+15; i++ {
        c <- x
        x, y = y, x+y
    }
    close(c)
}

func main() {
    c := make(chan int, 10)
    go fibonacci(cap(c), c)
    for i := range c {
        fmt.Println(i)
    }
}

# A closed channel always returns the channel's "nil" value

============================================================
Organization
============================================================

From https://talks.golang.org/2014/organizeio.slide

# Package name
- io/ioutil not io/util
- suffixarray not suffix_array
- Don't overgeneralize. A util package could be anything

# Testing of package
- Tests are distinguished by file name. Test files end in _test.go

package fmt

import "testing"

var fmtTests = []fmtTest{
    {"%d", 12345, "12345"},
    {"%v", 12345, "12345"},
    {"%t", true, "true"},
}

func TestSprintf(t *testing.T) {
    for _, tt := range fmtTests {
        if s := Sprintf(tt.fmt, tt.val); s != tt.out {
            t.Errorf("...")
        }
    }
}

# Test a specific test case in a specific file
go test -v github.com/owner/repo/pkg/mypackage -run TestMyPackage_function

# Workspace
- Defined by GOPATH
- "go get" fetch many repositories
- "go install" build a binary out of them

# Naming
- Use camelCase, not_underscores
- "Local variable names" should be short, typically one or two characters
- "Package names" are usually one lowercase word
- "Global variables" should have longer names
- Examples
  - bytes.Buffer not bytes.ByteBuffer
  - zip.Reader not zip.ZipReader
  - errors.New not errors.NewError
  - r not bytesReader
  - i not loopIterator

# Doc comments
// Join concatenates the elements of elem to create a single string.
// The separator string sep is placed between elements in the resulting string.
func Join(elem []string, sep string) string { }

- Doc comments should begin with the noun they describe
  - // Join concatenates…         good
  - // This function…             bad
- Package docs go above the package declaration
  // Package fmt…
  package fmt

#  Run go tour offline
go tool tour

# Why can use code below when err is already initialized somewhere? (Reinitialization question)
# https://stackoverflow.com/questions/34266337/why-it-is-possible-to-redefine-err-in-multiple-return-statement-in-go
x, err := run(code)

# Escape curly brackets in golang templates
# https://stackoverflow.com/questions/17641887/how-do-i-escape-and-delimiters-in-go-templates
{{`{{Your.Angular.Data}}`}}

# Trace HTTP requests latency
# https://medium.com/@deeeet/trancing-http-request-latency-in-golang-65b2463f548c
2016/09/27 17:58:38 DNS lookup: 5 ms
2016/09/27 17:58:38 TCP connection: 180 ms
2016/09/27 17:58:38 TLS handshake: 461 ms
2016/09/27 17:58:38 Server processing: 296 ms
2016/09/27 17:58:38 Content transfer: 180 ms

# Using regex capture groups 
# https://stackoverflow.com/questions/30483652/how-to-get-capturing-group-functionality-in-golang-regular-expressions
package main

import (
    "fmt"
    "regexp"
)

func main() {
    r := regexp.MustCompile(`(?P<Year>\d{4})-(?P<Month>\d{2})-(?P<Day>\d{2})`)
    fmt.Printf("%#v\n", r.FindStringSubmatch(`2015-05-27`))
    fmt.Printf("%#v\n", r.SubexpNames())
}

# Initialize a new module
# https://github.com/golang/go/wiki/Modules
go mod init github.com/you/hello

# Go module - build and test
go build ./...
go test ./...