# Loop with step
for i in {0..10..2}
do
  ..
done

# Loop over list of items
for file in file1 file2 file3
do
  echo $file
done

# Looping through all lines in a file
# http://stackoverflow.com/questions/1521462/looping-through-the-content-of-a-file-in-bash
while read p; do
  echo $p
done < FILEPATH.txt
# Single line
while read p; do echo $p; done <users.txt

# Process all files with certain extension
# https://stackoverflow.com/questions/14505047/loop-through-all-the-files-with-a-specific-extension
for f in *.rar; do unar "$f"; done

# Pad zero in string
n=1
wget http://aolradio.podcast.aol.com/sn/SN-`printf %03d $n`.mp3

# Run command or get env var
${HOME}
$(echo foo)

# Make output bold
# https://stackoverflow.com/questions/2924697/how-does-one-output-bold-text-in-bash
bold=$(tput bold)
normal=$(tput sgr0)

# Change output color of echo
# https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
Red          0;31     Light Red     1;31
Green        0;32     Light Green   1;32
Brown/Orange 0;33     Yellow        1;33
Blue         0;34     Light Blue    1;34
Purple       0;35     Light Purple  1;35

YELLOW='\033[0;93m'
RED='\033[0;31m'
NC='\033[0m' # No Color
printf "I ${RED}love${NC} Stack Overflow\n"
# Using echo need this option -e: enable interpretation of backslash escapes
echo -e "I ${RED}love${NC} Stack Overflow"

# Color and bold
# May also need to set TERM=xterm-color for non-interactive terminal
COLOR="\033[0;32m$(tput bold)"
NO_COLOR="\033[0m$(tput sgr0)"
echo -e "${COLOR}I'm colourful and bold${NO_COLOR}I'm normal"

# Brace expansion 
# http://unix.stackexchange.com/questions/315963/bash-command-to-copy-before-cursor-and-paste-after
echo a{b,c,d{e,f,g}}
ab ac ade adf adg

# Check if variable is set
# https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
if [[ $var ]]; then echo "var is set"; fi

# Check if variable is not set
if [[ ! $var ]]; then echo "var is not set"; fi

# Check variable equals value
if [ "$1" == "something" ]; then

# Pass literal tab character with $'\t'
sort -t $'\t'

# Get exit code of last command
echo $?

# Get basename i.e. folder name without full path
basename $PWD

# Bash shortcuts
# https://gist.github.com/tuxfight3r/60051ac67c5f0445efee

ctrl + a    Goto BEGINNING of command line
ctrl + e    Goto END of command line
alt + f     move cursor FORWARD one word
alt + b     move cursor BACK one word

ctrl + w    delete the word BEFORE the cursor

ctrl + u    Clear all BEFORE cursor
ctrl + k    Clear all AFTER cursor

!!          Run PREVIOUS command (e.g. sudo !!)
alt + .     print the LAST ARGUMENT

# Reset shell
reset

# Math expression: wrap in $(( ))
# https://unix.stackexchange.com/questions/40786/how-to-do-integer-float-calculations-in-bash-or-other-languages-frameworks
echo "$((20+5))"

# Parse command line arguments
# https://github.com/mattbryson/bash-arg-parse/blob/master/arg_parse_example
# https://github.com/kubeflow/pipelines/blob/master/ml-pipeline/deploy.sh
============================================================
# positional args
args=()

# named args
while [ "$1" != "" ]; do
  case "$1" in
      -a | --an_arg )               an_arg="$2";             shift;;
      -s | --some_more_args )       some_more_args="$2";     shift;;
      -y | --yet_more_args )        yet_more_args="$2";      shift;;
      -h | --help )                 usage;                   exit;; # quit and show usage
      * )                           args+=("$1")             # if no match, add it to the positional args
  esac
  shift # move to next kv pair
done

# restore positional args
set -- "${args[@]}"

# set positionals to vars
positional_1="${args[0]}"
positional_2="${args[1]}"
============================================================

# Example function
print_something () {
  echo Hello I am a function
}

# Multiline echo, output
# https://stackoverflow.com/questions/10969953/how-to-output-a-multiline-string-in-bash
cat << EOF
usage: up [--level <n>| -n <levels>][--help][--version]

Report bugs to: 
up home page:
EOF