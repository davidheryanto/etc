# Useful bash options for debugging: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
# -u: treat unset variables as an error and exit immediately
set -euxo pipefail

# Without printing each command and expanded variables
set -euo pipefail

# Shebang for bash
# https://stackoverflow.com/questions/21612980/why-is-usr-bin-env-bash-superior-to-bin-bash

#!/usr/bin/env bash

# Loop with step
for i in {0..10..2}
do
  ..
done

# Loop over list of items
for file in file1 file2 file3
do
  echo $file
done

# Loop over multipe lines of strings
while read line
do
  echo $line
done <<EOF 
line1
line2
EOF

# Looping through all lines in a file
# http://stackoverflow.com/questions/1521462/looping-through-the-content-of-a-file-in-bash
while read p; do
  echo $p
done < FILEPATH.txt
# Single line
while read p; do echo $p; done <users.txt

# Process all files with certain extension
# https://stackoverflow.com/questions/14505047/loop-through-all-the-files-with-a-specific-extension
for f in *.rar; do unar "$f"; done

# Pad zero in string
n=1
wget http://aolradio.podcast.aol.com/sn/SN-`printf %03d $n`.mp3

# Run command or get env var
${HOME}
$(echo foo)

# Make output bold
# https://stackoverflow.com/questions/2924697/how-does-one-output-bold-text-in-bash
bold=$(tput bold)
normal=$(tput sgr0)

# Change output color of echo: https://stackoverflow.com/a/58149187
# Using ANSI escape sequences 

Red          0;31     Light Red     1;31
Green        0;32     Light Green   1;32
Brown/Orange 0;33     Yellow        1;33
Blue         0;34     Light Blue    1;34
Purple       0;35     Light Purple  1;35

CYAN='\e[36m'
DEFAULT='\e[39m'

# Prefix with '1;' and '0;' for bold and no bold
GREEN='\e[1;32m'
DEFAULT='\e[0;39m'

printf "I ${GREEN}love${DEFAULT} Stack Overflow\n"

# Example wrapping set and unset color for easier readibility
echo -en "\e[1;32m"
echo "I am a green text"
echo -en "\e[39m"

# Using echo need this option -e: enable interpretation of backslash escapes
echo -e "I ${CYAN}love${DEFAULT} Stack Overflow"

# When printing in Java or Golang codes, usually this format is better
# Replace '\e' with '\033': CYAN='\033[36m' RED='\033[31m' RESET='\033[39m' 
# 
# System.out.println("I have \033[1;35m color \033[0;39m and then no color");

# Color and bold
# May also need to set TERM=xterm-color for non-interactive terminal
COLOR="\033[1;32m"
NO_COLOR="\033[0m"
echo -e "${COLOR}I'm colourful and bold${NO_COLOR}I'm normal"

# Another color example
COLOR_OK="\033[1;32m"
COLOR_ERR="\033[1;31m"
COLOR_RESET="\033[0m"

# Brace expansion 
# http://unix.stackexchange.com/questions/315963/bash-command-to-copy-before-cursor-and-paste-after
echo a{b,c,d{e,f,g}}
ab ac ade adf adg

# Good reference for bash operators e.g. -z -n
# http://tldp.org/LDP/abs/html/comparison-ops.html
# https://unix.stackexchange.com/a/109631
#
# -n: string is not null
# -z: string is null, that is, has zero length
#
$ foo="bar";
$ [ -n "$foo" ] && echo "foo is not null"
foo is not null
$ [ -z "$foo" ] && echo "foo is null"
$ foo="";
$ [ -n "$foo" ] && echo "foo is not null"
$ [ -z "$foo" ] && echo "foo is null"
foo is null

# Check if variable is set
# https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
if [[ $var ]]; then echo "var is set"; fi

# Check if variable is not set
if [[ ! $var ]]; then echo "var is not set"; fi

# Check variable equals value
if [ "$1" == "something" ]; then

# Check if variable is true: https://stackoverflow.com/a/2953673
if [ $myvar = true ]; then
  echo "myvar is true"
fi

# Set variable if not set
# https://unix.stackexchange.com/questions/122845/using-a-b-for-variable-assignment-in-scripts
VAR1="${VAR1:-default value}"
VAR1="${VAR1:-$VAR2}"

# Pass literal tab character with $'\t'
sort -t $'\t'

# Get exit code of last command
echo $?

# Check if exit code is 0
# "==" for string comparison, "-eq" or "-ne" for numeric comparison
if [[ $? -ne 0 ]]; then echo "exit code not 0"; fi

# Get basename i.e. folder name without full path
basename $PWD

# Bash shortcuts
# https://gist.github.com/tuxfight3r/60051ac67c5f0445efee

ctrl + a    Goto BEGINNING of command line
ctrl + e    Goto END of command line
alt + f     move cursor FORWARD one word
alt + b     move cursor BACK one word

ctrl + w    delete the word BEFORE the cursor

ctrl + u    Clear all BEFORE cursor
ctrl + k    Clear all AFTER cursor

!!          Run PREVIOUS command (e.g. sudo !!)
alt + .     print the LAST ARGUMENT

# Reset shell
reset

# Math expression: wrap in $(( ))
# https://unix.stackexchange.com/questions/40786/how-to-do-integer-float-calculations-in-bash-or-other-languages-frameworks
echo "$((20+5))"

# Check no of arguments passed
# https://stackoverflow.com/questions/18568706/check-number-of-arguments-passed-to-a-bash-script
if [[ $# -ne 1 ]]; then
    echo "Illegal number of parameters"
fi

# Parse command line arguments
# https://github.com/mattbryson/bash-arg-parse/blob/master/arg_parse_example
# https://github.com/kubeflow/pipelines/blob/8e53eb43adec9dd7593f99baae24813cc40bb302/test/postsubmit-tests-with-pipeline-deployment.sh
============================================================
# positional args
args=()

# named args
while [ "$1" != "" ]; do
  case "$1" in
      -a | --an_arg )               an_arg="$2";             shift;;
      -s | --some_more_args )       some_more_args="$2";     shift;;
      -y | --yet_more_args )        yet_more_args="$2";      shift;;
      -h | --help )                 usage;                   exit;; # quit and show usage
      * )                           args+=("$1")             # if no match, add it to the positional args
  esac
  shift # move to next kv pair
done

# restore positional args
set -- "${args[@]}"

# set positionals to vars
positional_1="${args[0]}"
positional_2="${args[1]}"
============================================================

# Parse command line arguments: named args ONLY without positional args
============================================================

usage()
{
    echo "usage: run.sh
    [-a | --an_args           some arguments ]
    [-s | --some_more_args    some other arguments ]
    [-h help]"
}

while [ "$1" != "" ]; do
  case "$1" in
      -a | --an_arg )               an_arg="$2";             shift;;
      -s | --some_more_args )       some_more_args="$2";     shift;;
      -y | --yet_more_args )        yet_more_args="$2";      shift;;
      -h | --help )                 usage; exit;; # quit and show usage
      * )                           usage; exit 1
  esac
  shift # move to next kv pair
done
============================================================

# Example function
print_something () {
  echo Hello I am a function
}

# Multiline echo, output
# https://stackoverflow.com/questions/10969953/how-to-output-a-multiline-string-in-bash
cat << EOF
usage: up [--level <n>| -n <levels>][--help][--version]

Report bugs to: 
up home page:
EOF

# Check if variable is NOT set
# https://stackoverflow.com/questions/11362250/in-bash-how-do-i-test-if-a-variable-is-defined-in-u-mode
if [ -z $MYVAR ]; then
  echo MYVAR is not set
else
  echo MYVAR=$MYVAR
fi

# Check if variable IS set
if [ $MYVAR ]; then
  echo MYVAR=$MYVAR
else
  echo MYVAR is not set
fi

# https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html#The-Set-Builtin
# Expand variables in bash script
set -x
# Exit immediately if pipeline fails
set -e
# Normally used for debuggin
set -ex

# Pass all arguments to a bash script
# https://unix.stackexchange.com/questions/78470/pass-arguments-to-function-exactly-as-is
"$@"
# e.g. use in Dockerfile 
# exec "$@"

# Export environment variables set in a file containing lines of KEY=VALUE
set -o allexport # OR: set -a
source envfile

# Go to previous directory. This value is also stored in $OLDPWD
# https://superuser.com/a/113220
cd -

# Get the directory of a Bash script
# https://stackoverflow.com/questions/59895/get-the-source-directory-of-a-bash-script-from-within-the-script-itself
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
# Shorter alternative
dirname "$BASH_SOURCE"

# Get the exit code of the last (rightmost) command to exit with a non-zero status when using pipe
# https://stackoverflow.com/questions/6871859/piping-command-output-to-tee-but-also-save-exit-code-of-command
set -o pipefail
# Example:
false | tee /dev/null ; echo $?
0
set -o pipefail
false | tee /dev/null ; echo $?
1

# What does -x means in conditional
# if [ -x /etc/rc.local ] then
https://askubuntu.com/questions/445469/what-does-x-mean-in-if-conditional-statement

# Math calculation in float with bc
# https://unix.stackexchange.com/a/40787
echo 20+5/2 | bc

# Skip first 2 lines
# https://stackoverflow.com/a/604871
tail -n +3 <filename>

# Use curly braces to create multiple related files, from Addy Osmani Twitter
touch image-{header,footer}.txt
touch product.{js,css}