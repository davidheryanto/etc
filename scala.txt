# Frameworks for REST services
============================================================
============================================================
Play
Spray -> Going to be replaced with Akka-HTTP
http4s (functional idiom, use scalaz-streams)

============================================================
============================================================

------------------------------------------------------------
Notes from Learning Scala Book
------------------------------------------------------------

# Checking type
============================================================
x.isInstanceOf[Int]

# String interpolation
==============================================================
println(s"Pi, using 355/113, is about $approx." )

printf
------
f"I wrote a new $item%.3s today"  # Print first 3 char of item
f"Enjoying this $item ${355/113.0}%.5f times today"

# Regex
==============================================================
"Froggy went a' courting" matches ".*courting"
"milk, tea, muck" replaceAll ("m[^ ]+k", "coffee")
"milk, tea, muck" replaceFirst ("m[^ ]+k", "coffee")

val input = "Enjoying this apple 3.14159 times today"
val pattern = """.* apple ([\d.]+) times .*""".r
val pattern(amountText) = input
val amount = amountText.toDouble

# Tuple: 1-based index
val info = (5, "Korben", true)
val name = info._2
# Key-value pairs in tuple
val red = "red" -> "0xff0000"

# If..Else
==============================================================
if (<Boolean expression>) <expression>

if (<Boolean expression>) <expression>
else <expression>

val max = if (x > y) x else y

# Match
==============================================================
<expression> match {
	case <pattern match> => <expression>
	[case...]
}

val x = 10; val y = 20
val max = x > y match {
 case true => x
 case false => y
}

val status = 500
val message = status match {
 case 200 => "ok"
 case 400 => {
   println("ERROR - we called the service incorrectly")
   "error"
 }
 case 500 => {
   println("ERROR - the service encountered an error")
   "error"
 }
}

# A pattern alternative: any of the patterns
==============================================================
case <pattern 1> | <pattern 2> .. => <one or more expressions>

val kind = day match {
  case "MON" | "TUE" | "WED" | "THU" | "FRI" => "weekday"
  case "SAT" | "SUN" => "weekend"
}

# Matching with Wildcard Patterns
==============================================================
val message = "Value Binding"
val status = message match {
  case "Ok" => 200
  case other => {
    println(s"Couldn't parse $other")
    -1
  }
}

val status = message match {
  case "Ok" => 200
  case _ => {
    println(s"Couldn't parse $message")
    -1
  }
}

# Matching with Pattern Guards
==============================================================
val response: String = null
response match {
  case s if s != null => println(s"Received '$s'")
  case s => println("Error! Received a null response")
}

# Matching Types with Pattern Variables
==============================================================
case <identifier>: <type> => <one or more expressions>

val x: Int = 12180
val y: Any = x
y match {
  case x: String => s"'x'"
  case x: Double => f"$x%.2f"
  case x: Float => f"$x%.2f"
  case x: Long => s"${x}l"
  case x: Int => s"${x}i"
}

# Loops
==============================================================
Iterating, filtering, value binding

<starting integer> [to|until] <ending integer> [by increment]

for (<identifier> <- <iterator>) [yield] [<expression>]

for (x <- 1 to 7) { println(s"Day $x:") } 

val days = for (x <- 1 to 7) yield { s"Day $x:" }
for (day <- days) print(day + ", ")

# Iterator Guard
============================================================
for (<identifier> <- <iterator> if <Boolean expression>) ...

val threes = for (i <- 1 to 20 if i % 3 == 0) yield i

val quote = "Faith,Hope,,Charity"
for {
	t <- quote.split(",")
	if t != null
	if t.size > 0
}
{ println(t) }

# Nested Iterators
============================================================
for { x <- 1 to 2 
      y <- 1 to 3 }
  { print(s"($x, $y) " ) }

# Value Binding: temporary variables inside expression block for current iter
============================================================
for (<identifier> <- <iterator>; <identifier> = <expression>) ...

val powersOf2 = for (i <- 0 to 8; pow = 1 << i) yield pow

# While and Do/While
============================================================
while (<Boolean expression>) statement

var x = 10; while (x > 0) x -= 1

val x = 0
do println(s"Here I am, x = $x") while (x > 0)

# Functions
============================================================
def <identifier>(<identifier>: <type>[, ... ]): <type> = <expression>

def multiplier(x: Int, y: Int): Int = { x * y }

Procedure: No return value
--------------------------
def log(d: Double): Unit = println(f"Got value $d%.2f")

Tail Recursive
--------------
@annotation.tailrec
def power(x: Int, n: Int, t: Int = 1): Int = {
  if (n < 1) t
  else power(x, n-1, x*t)
}

Calling Functions with Named Parameters
---------------------------------------
def greet(prefix: String, name: String) = s"$prefix $name"

val greeting2 = greet(name = "Brown", prefix = "Mr")

Vararg
------
def sum(items: Int*): Int = {
  var total = 0
  for (i <- items) total += i
  total
}

Parameter Groups
----------------
def max(x: Int)(y: Int) = if (x > y) x else y

val larger = max(20)(39)

Type Parameters
---------------
def <function-name>[type-name](parameter-name>: <type-name>): <type-name>...

def identity[A](a: A): A = a

val s: String = identity[String]("Hello")
val d: Double = identity[Double](2.717)

# Can infer the parameter type and returned type
val s = identity("Hello")  # s: String = Hello

Methods and Operators
---------------------
val d = 65.34
d.round
d.floor
d.compare(18.0)
d.+(2.7231)

Operator Notation:
d compare 18.0
d + 2.721
"staring" substring (1,4)

============================================================
First Order Functions
============================================================

Function Type:
([<type>, ...]) => <type>

def double(x: Int): Int = x*2
val myDouble: (Int) => Int = double
val myDouble = double _  // Equivalent

def max(a: Int, b: Int) = if (a > b) a else b
val maximize: (Int, Int) => Int = max

// Function with no input
def logStart() = "=" * 50 + "\nStarting NOW\n" + "=" * 50
val start: () => String = logStart
println(start())

Higher-order functions
------------------------------------------------------------
A higher-order function is a function that has a value with a function type as an input parameter or return value.

// Only execute function f if s is not null
def safeStringOp(s: String, f: String => String) = {
  if (s != null) f(s) else s
}
def reverser(s: String) = s.reverse
safeStringOp(null, reverser)

Function Literals
------------------------------------------------------------
([<identifier>: <type>, ... ]) => <expression>

val doubler = (x: Int) => x * 2
val start = () => "=" * 50 + "\nStarting NOW\n" + "=" * 50

// Can define it inside of higher-order func invocation
safeStringOp("Ready", (s: String) => s.reverse)
safeStringOp("Ready", s => s.reverse)  // The type in function literal can be ignored, because it's already defined in safeStringOp

Placeholder syntax
------------------------------------------------------------
safeStringOp("Ready", _.reverse)

// Using type parameter
def tripleOp[A,B](a: A, b: A, c: A, f: (A, A, A) => B) = f(a,b,c)

tripleOp[Int,Double](23, 92, 14, 1.0 * _ / _ / _)
tripleOp[Int,Boolean](93, 92, 14, _ > _ + _)

Partially Applied Functions and Currying
------------------------------------------------------------
def factorOf(x: Int, y: Int) = y % x == 0

// Don't retain parameters
val f = factorOf _

// Retain some param i.e. partially apply the func
val multipleOf3 = factorOf(3, _: Int)
val y = multipleOf3(78)

// Currying
def factorOf(x: Int)(y: Int) = y % x == 0
val isEven = factorOf(2) _
val z = isEven(32)

Partial functions
------------------------------------------------------------
A partial function, as opposed to a total
function, only accepts a partial amount of all possible input values.

val statusHandler: Int => String = {
  case 200 => "Okay"
  case 400 => "Your error"
}

// statusHandler(401) will return MatchError

Invoking Higher-Order Functions with Function Literal Blocks
------------------------------------------------------------
// Traditional way
def safeStringOp(s: String, f: String => String) = {
  if (s!= null) f(s) else s
}

// Use function literal blocks
val uuid = java.util.UUID.randomUUID.toString

val timedUUID = safeStringOp(uuid, { s =>
  val now = System.currentTimeMillis
  val timed = s.take(24) + now
  timed.toUpperCase
})

// Clean up by using parameter groups
def safeString(s: String)(f: String => String) = {
  if (s!= null) f(s) else s
}

val timedUUID2 = safeString(uuid) { s => 
  val now = System.currentTimeMillis
  val timed = s.take(24) + now
  timed.toUpperCase
}

// Parameter by name and type param. Return type of f is the return type of timer
def timer[A](f: => A): A = {
  def now = System.currentTimeMillis
  val start = now; val a = f; val end = now
  println(s"Executed in ${end - start} ms")
  a
}

val veryRandomAmount = timer {
  util.Random.setSeed(System.currentTimeMillis)
  for (i <- 1 to 10000) util.Random.nextDouble
  util.Random.nextDouble
}

Exercise Typesafe
------------------------------------------------------------
def conditional[A](x: A, p: A => Boolean, f: A => String): String = {
  if (p(x)) f(x) else ""
}

def typeSafely(i: Int): String = {
  val a1 = conditional[Int](i, _ % 3 == 0, _ => "type")
  val a2 = conditional[Int](i, _ % 5 == 0, _ => "safe")
  val a3 = conditional[Int](i, _ % 3 > 0 && i % 5 > 0, x => s"$x")
  a1 + a2 + a3
}

val sequence = 1 to 100 map typeSafely
println(sequence.mkString("\n"))

============================================================
Collections
============================================================

List, Set, Maps
------------------------------------------------------------
val numbers = List(32, 95, 24, 21, 17)

// List: Immutable, implemented as Linked List
val numbers = List(32, 95, 24, 21, 17)
val colors = List("red", "green", "blue")
println(s"I have ${colors.size} colors: $colors")
colors.head
colors.tail
colors(2)

// Higher-order functions on collections
colors.foreach((c: String) => println(c))
colors.map((c: String) => c.size)
numbers.reduce((a: Int, b: Int) => a + b)

// Set
val unique = Set(10, 20, 30, 20, 20, 10)
val sum = unique.reduce((a: Int, b: Int) => a + b)

// Map
val colorMap = Map("red" -> 0xFF0000, "green" -> 0xFF00, "blue" -> 0xFF)
val redRGB = colorMap("red")
val cyanRGB = colorMap("green") | colorMap("blue")
val hasWhite = colorMap.contains("white")
for (pairs <- colorMap) {
  println(pairs)
}

// List in detail
val keyValues = List(('A', 65), ('B', 66), ('C', 67))
keyValues(0)

val primes = List(2, 3, 5, 7, 11, 13)
var i = primes
while (!i.isEmpty) {
  print(i.head + ", "); i = i.tail
}

def visit(i: List[Int]) {
  if (i.size > 0) {
    print(i.head + ",")
    visit(i.tail)
  }
}
visit(primes)

// Check end of list with Nil
while (i != Nil) {
  print(i.head + ","); i = i.tail
}

// Various List methods
val numbers = 1 :: 2 :: 3 :: Nil

val first = Nil.::(1)
val second = 2 :: first
second.tail == first  // Returns true

List(1, 2) ::: List(2, 3)

List(1, 2) ++ Set(3, 4, 3)

List(1, 2) == List(1, 2)

List(3, 5, 4, 3, 4).distinct

List('a', 'b', 'c', 'd') drop 2

List(23, 8, 14, 21) filter (_ > 18)

List(List(1, 2), List(3, 4)).flatten

List(1, 2, 3, 4, 5) partition (_ < 3)

List(1, 2, 3).reverse

List(2, 3, 5, 7) slice (1, 3)  // Exclude the end index

List("apple", "to") sortBy (_.size)

List("apple", "to").sorted

List(2, 3, 5, 7) splitAt 2

List(2, 3, 5, 7, 11, 13) take 3

List(1, 2) zip List("a", "b")

// Corollary to ::, drop, take
// Faster to use operations on the start of the list rather than the last
val appended = List(1, 2, 3, 4) :+ 5
val suffix = appended takeRight 3
val middle = suffix dropRight 2

List mapping
------------------------------------------------------------
List(0, 1, 0) collect {case 0 => "ok"}
List("milk,tea") flatMap (_.split(','))
List("milk","tea") map (_.toUpperCase)

Reducing List
------------------------------------------------------------
List(41, 59, 26).max
List(5, 6, 7).product
List(34, 29, 18) contains 29
List(0, 4, 3) endsWith List(4, 3)
List(24, 17, 32) exists (_ < 18)
List(24, 17, 32) forall (_ < 18)
List(0, 4, 3) startsWith List(0)

def contains(x: Int, l: List[Int]): Boolean = {
  var a: Boolean = false
  for (i <- l) {
    if (!a) a = (i == x)
  }
  a
}
val included = contains(19, List(46,19,92))

// More general contains function. The exists function can be customised
def boolReduce(l: List[Int], start: Boolean)(f: (Boolean, Int) => Boolean): Boolean = {
  var a = start
  for (i <- l) a = f(a, i)
  a
}
val included_2 = boolReduce(List(46,19,92), false){ (a,i) => if (a) a else (i == 19)}

// Generalize even further: for any Types
def reduceOp[A,B](l: List[A], start: B)(f: (B, A) => B): B = {
  var a = start
  for (i <- l) a = f(a, i)
  a
}
val included_3 = reduceOp(List(46,19,92), false) {
  (a,i) => if (a) a else (i == 19)
}
// Operation not limited to Int,Boolean. Can even use sum
val answer = reduceOp(List(11.3,23.5,7.2), 0.0)(_ + _)

// List folding operations
//
// fold,reduce,scan can only return value of the same type as the elements in list
// but the left/right can return diff type e.g. return Boolean for Int elements
//
// Also fold,reduce,scan run in any order VS the directional variants
// Hint: For parallelism and distributed execution, we may wanna enforce order
List(4, 5, 6).fold(0)(_ + _)       // 15
List(4, 5, 6).foldLeft(0)(_ + _)   // 15
List(4, 5, 6).foldRight(0)(_ + _)  // 15
List(4, 5, 6).reduce(_ + _)        // 15
List(4, 5, 6).reduceLeft(_ + _)    // 15
List(4, 5, 6).reduceRight(_ + _)   // 15
List(4, 5, 6).scan(0)(_ + _)       // List(0, 4, 9, 15)
List(4, 5, 6).scanLeft(0)(_ + _)   // List(0, 4, 9, 15)
List(4, 5, 6).scanRight(0)(_ + _)  // List(15, 11, 6, 0)

// Now, use the builtin folding operations
val included_4 = List(46,19,92).foldLeft(false) {
  (a,i) => if (a) a else (i == 19)
}
val answer_2 = List(11.3,23.5,7.2).reduceLeft(_ + _)

Converting Collections
------------------------------------------------------------
List(24, 99, 104).mkString(", ")  // "24, 99, 104"
List('f', 't').toBuffer  // Make the collection mutable
Map("a" -> 1, "b" -> 2).toList   // List((a,1), (b,2))
Set(1 -> true, 3 -> true).toMap  // Map(1 -> true, 3 -> true)
List(2, 5, 5, 3, 2).toSet  // Set(2, 5, 3)
List(2, 5, 5, 3, 2).toString  // "List(2, 5, 5, 3, 2)"

// Converting between Java and Scala collection
import collection.JavaConverters._

List(12, 29).asJava
new java.util.ArrayList(5).asScala

Pattern Matching with Collections
------------------------------------------------------------
val statuses = List(500, 404)

val msg = statuses match {
  case x if x contains(500) => "has error"
  case _ => "okay"
}

val msg_2 = statuses match {
  case List(404, 500) => "not found & error"
  case List(500, 404) => "error & not found"
  case List(200, 200) => "okay"
  case _ => "Not sure what happened"
}

// Bindings
val msg_3 = statuses match {
  case List(500, x) => s"Error followed by $x"
  case List(e,x) => s"$e followed by $x"
}

// Head and tail (x and xs)
val head = List('r','g','b') match {
  case x :: xs => xs
  case Nil => ' '
}

// Tuple is also supported. Can use diff types
val code = ('h', 204, true) match {
  case (_, _, false) => 501
  case ('c', _, true) => 302
  case ('h', x, true) => x
  case (c,x,true) => {
    println(s"Did not expect code $c")
    x
  }
}

============================================================
Ch7: More Collections
============================================================

Mutable Collections
------------------------------------------------------------
collection.immutable.List -> collection.mutable.Buffer
collection.immutable.Set  -> collection.mutable.Set
collection.immutable.Map  -> collection.mutable.Map

val nums = collection.mutable.Buffer(1)
for (i <- 2 to 10) nums += i

// Start with empty buffer. Notice the type
val nums = collection.mutable.Buffer[Int]()
for (i <- 2 to 10) nums += i

// Converting back to immutable: toList, toSet, toMap
val l = nums.toList

Immutable -> Mutable
------------------------------------------------------------
toBuffer

Collection Builders: Buffer is to broadly applicable
------------------------------------------------------------
The Builder type is a good choice if you are only building a mutable collection iteratively in order to convert it to an immutable collection. If you need Iterable operations while building your mutable collection, or don’t plan on converting to an immutable collection, using one of the Buffer or other mutable collection types is a better match.

val b = Set.newBuilder[Char]
b += 'h'
b ++= List('e','l','l','o')
val helloSet = b.result

Arrays
------------------------------------------------------------
- Fixed-size, mutable, indexed collection
- Mainly for compatibility with JVM code

val colors = Array("red", "green", "blue")
colors(0)
// listFiles method returns an Array
val files = new java.io.File(".").listFiles

Seq and Sequences
------------------------------------------------------------
Seq         The root of all sequences. Shortcut for List() .
IndexedSeq  The root of indexed sequences. Shortcut for Vector() .
Vector      A list backed by an Array instance for indexed access.
Range       A range of integers. Generates its data on-the-fly.
LinearSeq   The root of linear (linked-list) sequences.
List        A singly linked list of elements.
Queue       A first-in-last-out (FIFO) list.
Stack       A last-in-first-out (LIFO) list.
Stream      A lazy list. Elements are added as they are accessed.
String      A collection of characters.

// String as sequence of characters
val hi = "Hello, " ++ "worldly" take 12 replaceAll ("w", "W")

Streams
------------------------------------------------------------
- Lazy collection: elem added only when accessed for first time
- Elements generated are cached
- Terminated with Stream.empty (counterpart of List.Nil)
- Recursive data struct with head and tail
- Constuct with Stream.cons that returns a new containing head and a recursive invocation of func that build tail

// Streams of incrementing int
def inc(i: Int): Stream[Int] = Stream.cons(i, inc(i+1))
val s = inc(1)  // Stream(1, ?)
val l = s.take(5).toList  // List(1, 2, 3, 4, 5)

// Bounded Streams
// The important part is defining the head value for your new stream.
def to(head: Char, end: Char): Stream[Char] = (head > end) match {
  case true => Stream.empty  // Terminate the collection
  case false => head #:: to((head+1).toChar, end)
}

val hexChars = to('A', 'F').take(20).toList

------------------------------------------------------------
Monadic Collections: Can contain no more than 1 elem
------------------------------------------------------------

Option Collection: presence/absence of a single val
------------------------------------------------------------
// Safer than null? i.e. Option return value means that the func
// may not accept the input data (hence returning None)

var x:String = "Indeed"
var a = Option(x)
x = null
var b = Option(x)

// Using isDefined and isEmpty
println(s"a is defined? ${a.isDefined}")    // true
println(s"b it not defined? ${b.isEmpty}")  // true

// Check for illegal division by zero
def divide(amt: Double, divisor: Double): Option[Double] = {
  if (divisor == 0) None
  else Option(amt / divisor)
}
val legit = divide(5, 2)
var illegit = divide(3, 0)

// Collections use Option to provide safe operation (when handling empty collection)
// with headOption method
val odds = List(1,3,5)
val firstOdd = odds.headOption
val evens = odds filter (_ % 2 == 0)
val firstEven = evens.headOption  // head will throw NoSuchElementException

// find operation: combination of filter & headOption
val words = List("risible", "scavenger", "gist")
val uppercase = words find (w => w == w.toUpperCase)  // Returns 'None' Option
var lowercase = words find (w => w == w.toLowerCase)  // Returns 'Some' Option

// Option is a collection too! So, we can continue to transform it
val filtered = lowercase filter (_ endsWith "ible") map (_.toUpperCase)
val exactSize = filtered filter (_.size > 15) map (_.size)  // Typesafe: Returns 'None' Option

Try Collection
------------------------------------------------------------
def loopAndFail(end: Int, failAt: Int): Int = {
  for (i <- 1 to end) {
    println(s"$i)")
    if (i == failAt) throw new Exception("Too many iterations")
  }
  end
}

val t1 = util.Try(loopAndFail(2, 3))
val t2 = util.Try(loopAndFail(4, 2))

def nextError = util.Try{1 / util.Random.nextInt(2)}
val x = nextError  // Will randomly return Failure or Success

// _ because nextError does not accept any param. So the prev ret value is unused
nextError flatMap { _ => nextError }
// Executes the given function once in case of Success , or not at all in case of a Failure .
nextError foreach( x => println("sucess!" + x))
nextError getOrElse 0
nextError orElse nextError  // Opposite of flatMap
nextError.toOption  // Convert util.Try to Option (Some or None)
// In case of Success , invokes a function that maps the embedded value to a new value.
nextError map (_ * 2)
nextError match { case util.Success(x) => x; case util.Failure(error) => -1 }
nextError  // Do nothing

// Validating number in Strings
val input = " 123 "
val result = util.Try(input.toInt) orElse util.Try(input.trim.toInt)
result foreach { r => println(s"Parsed '$input' to $r!")}
val x2 = result match {
  case util.Success(x) => Some(x)
  case util.Failure(ex) => {
    println(s"Couldn't parse input '$input'")
    None
  }
}

Future Collection
------------------------------------------------------------

// Set 'global' execution context
import concurrent.ExecutionContext.Implicits.global

val f = concurrent.Future{ Thread.sleep(5000); println("hi") }
println("Waiting")

Async future operations
------------------------------------------------------------
// Set 'global' execution context
import concurrent.ExecutionContext.Implicits.global
import concurrent.Future

def nextFtr(i: Int = 0) = Future {
  def rand(x: Int) = util.Random.nextInt(x)

  Thread.sleep(rand(5000))
  if (rand(3) > 0) i + 1 else throw new Exception
}

// Chains the second future to the first and returns a new overall future.
// If the first is unsuccessful, the second is invoked.
nextFtr(1) fallbackTo nextFtr(2)

// Chains the second future to the first and returns a new overall
// future. If the first is successful, its return value will be used to
// invoke the second.
nextFtr(1) flatMap nextFtr()

// Chains the given function to the future and returns a new
// overall future. If the future is successful, its return value will
// be used to invoke the function
nextFtr(1) map (_ * 2)

// After the future’s task completes, the given function will be invoked with
// a util.Try containing a value (if success) or an exception (if failure).
nextFtr() onComplete { _ getOrElse 0 }

// If the future’s task throws an exception, the given function will
// be invoked with that exception.
nextFtr() onFailure { case _ => "Error!" }

// If the future’s task completes successfully, the given function
// will be invoked with the return value.
nextFtr() onSuccess { case x => s"Got $x" }

// Runs the futures in the given sequence concurrently, returning a new future. 
// If all futures in the sequence are successful, a list of their return 
// values will be returned. 
// Otherwise the first exception that occurs across the futures will be returned.
concurrent.Future sequence List(nextFtr(1), nextFtr(5))

Example
------------------------------------------------------------
import concurrent.ExecutionContext.Implicits.global
import concurrent.Future

val APPID = "Paste your APPID from openweathermap.org"

def cityTemp(name: String): Double = {
  val url = s"http://api.openweathermap.org/data/2.5/weather?APPID=$APPID"
  val cityUrl = s"$url&q=$name"
  val json = io.Source.fromURL(cityUrl).mkString.trim
  val pattern = """.*"temp":([\d.]+).*""".r
  val pattern(temp) = json
  temp.toDouble
}

val cityTemps = Future sequence Seq(
  Future(cityTemp("Fresno")), Future(cityTemp("Tempe"))
)

cityTemps onSuccess {
  case Seq(x,y) if x > y => println(s"Fresno is warmer: $x K")
  case Seq(x,y) if y > x => println(s"Tempe is warmer: $y K")
}

Handle Futures Synchronously
------------------------------------------------------------
// Pass in the maximum amt of time to wait
concurrent.Await.result()

// Set 'global' execution context
import concurrent.ExecutionContext.Implicits.global
import concurrent.Future

def nextFtr(i: Int = 0) = Future {
  def rand(x: Int) = util.Random.nextInt(x)

  Thread.sleep(rand(5000))
  if (rand(3) > 0) i + 1 else throw new Exception
}

import concurrent.duration._
val maxTime = Duration(10, SECONDS)
// When nextFtr() returns a Successful value, concurrent.Await will return it
// When nextFtr() throws an exception, current thread will be disrupted
val amount = concurrent.Await.result(nextFtr(5), maxTime)

Summary:
- Monadic collections provide type-safe chainable operations and management for sensitive and complex situations such as missing data, error conditions, and concurrent processing.


Difference between onComplete and foreach:
http://stackoverflow.com/questions/36807848/what-is-the-difference-between-oncomplete-and-foreach-for-a-future-in-scala
------------------------------------------------------------
val f = Future { ??? } // this future completes with a failure

// foreach only calls the callback if the future is successful
f.foreach(_ => thisWillNeverExecute()) 

// This will print "future failed" after the future completes
f.onComplete {
  case Success(_) => println("future completed successfully")
  case Failure(e) => println("future failed")
}

Blocking Explanation: 
------------------------------------------------------------
http://stackoverflow.com/questions/29068064/scala-concurrent-blocking-what-does-it-actually-do/29069021#29069021

import scala.concurrent._
val ec = scala.concurrent.ExecutionContext.Implicits.global

(0 to 100) foreach { n =>
    Future {
        println("starting Future: " + n)
        blocking { Thread.sleep(3000) }
        println("ending Future: " + n)
    }(ec)
}

// If we remove 'blocking' above, the tasks will execute a few at a time

============================================================
Classes
============================================================

Basics
------------------------------------------------------------
class User(val name: String) {
  def greet: String = s"Hello from $name"

  override def toString = s"User($name)"
}

val users = List(new User("Shoto"), new User("Art3mis"), new User("Aesch"))
val sizes = users map (_.name.size)
val sorted = users sortBy (_.name)
val third = users find (_.name contains "3")
val greet = third map (_.greet) getOrElse "hi"

// Polymorphism
class A {
  def hi = "Hello from A"
  override def toString = getClass.getName
}

class B extends A

class C extends B {
  override def hi = "hi C -> " + super.hi
}

val hiA = new A().hi
val hiB = new B().hi
val hiC = new C().hi

// List is of type A, the lowest common denominator of class instances
val misc = List(new C, new A, new B)
val messages = misc.map(_.hi).distinct.sorted

Class definition
------------------------------------------------------------
// Simple class
class <identifier> [extends <identifier>] [{ fields, methods, and classes }]

// With input params
class <identifier>  ([val|var] <identifier>: <type>[, ... ])
                    [extends <identifier>(<input parameters>)]
                    [{ fields and methods }]

class Car(val make: String, var reserved: Boolean) {
  def reserve(r: Boolean): Unit = {
    reserved = r
  }
}

val t = new Car("Toyota", false)
t.reserve(true)
println(s"My ${t.make} is now reserved? ${t.reserved}")


Extending
------------------------------------------------------------
class Car(val make: String, var reserved: Boolean) {
  def reserve(r: Boolean): Unit = {
    reserved = r
  }
}

val t = new Car("Toyota", false)
t.reserve(true)
println(s"My ${t.make} is now reserved? ${t.reserved}")

class Lotus(val color: String, reserved: Boolean) extends Car("Lotus", reserved)

val l = new Lotus("Silver", false)
println(s"Requested a ${l.color} ${l.make}")

Default values
------------------------------------------------------------
class <identifier>  ([val|var] <identifier>: <type> = <expression>[, ... ])
                    [extends <identifier>(<input parameters>)]
                    [{ fields and methods }]

class Car(val make: String, var reserved: Boolean = true, val year: Int = 2015) {
  override def toString: String = s"$year $make, reserved = $reserved"
}
val a = new Car("Acura")
val l = new Car("Lexus", year=2010)
val p = new Car(reserved = false, make = "Porsche")

With type parameters
------------------------------------------------------------
class <identifier>  [type-parameters]
                    ([val|var] <identifier>: <type> = <expression>[, ... ])
                    [extends <identifier>[type-parameters](<input parameters>)]
                    [{ fields and methods }]

// Can take advantage of collection operations
class Singular[A](element: A) extends Traversable[A] {
  override def foreach[U](f: (A) => U): Unit = f(element)
}

val p = new Singular("Planes")
p foreach println
val name: String = p.head

Abstract Class
------------------------------------------------------------
Create a usable base type while delegating the implementation

abstract class Car {
  val year: Int
  val automatic: Boolean = true

  def color: String
}

class RedMini(val year: Int) extends Car {
  def color = "Red"
}

val m: Car = new RedMini(2005)

class Mini(val year: Int, val color: String) extends Car
val redMini: Car = new Mini(2005, "Red")
println(s"Got a ${redMini.color} Mini")

Anonymous Class
------------------------------------------------------------
Nonreusable and nameless class definition

abstract class Listener {
  def trigger
}

class Listening {
  var listener: Listener = null
  def register(l: Listener) { listener = l}
  def sendNotification() { listener.trigger }
}

val notification = new Listening()
notification.register(new Listener {
  override def trigger: Unit = println(s"Trigger at ${new java.util.Date}")
})

notification.sendNotification

Overloaded Methods
------------------------------------------------------------
class Printer(msg: String) {
  def print(s: String): Unit = println(s"$msg: $s")
  def print(l: Seq[String]): Unit = print(l.mkString(", "))
}

// Providing default value is better than overloading method? ↓ duplication

Apply Methods
------------------------------------------------------------
class Multiplier(factor: Int) {
  def apply(input: Int) = input * factor
}

val tripleMe = new Multiplier(3)
val tripled = tripleMe.apply(10)
val tripled2 = tripleMe(10)  // Don't need the apply keyword

Essentially a shortcut, like in List l => l(0) to get 1st elem

Lazy values 
------------------------------------------------------------
class RandomPoint {
  val x = {println("creating x"); util.Random.nextInt}
  lazy val y = {println("now y"); util.Random.nextInt}
}
val p = new RandomPoint  // Will print 'creating x'
println(s"Location is ${p.x}, ${p.y}")  // Only now that 'now y' is printed
println(s"Location is ${p.x}, ${p.y}")  // Both x and y are stable now. No printout

Packaging: reverse domain naming
------------------------------------------------------------
package <identifier>

import <package>.<class>

import collection.mutable._  // Import entire contents of a package

// Import group
import <package>.{<class 1>[, <class 2>...]}

import collection.mutable.{Queue,ArrayBuffer}

// Import alias
import <package>.{<original name>=><alias>}

import collection.mutable.{Map=>MutMap}
val m1 = Map(1 -> 2)  // Create immutable map
val m2 = MutMap(2 -> 3)  // Create mutable map

// Packaging class: Make it possible to have a same file, different packages
package <identifier> { <class definitions> }

package com {
  package oreilly {
    class Config(val baseUrl: String = "http://localhost")
  }
}

Privacy controls
------------------------------------------------------------
class User { protected val passwd = util.Random.nextString(10) }
class ValidUser extends User { def isValid = ! passwd.isEmpty }

val isValid = new ValidUser().isValid 
new User().passwd  // Will return error

---

class User(private var password: String) {
  def update(p: String): Unit = {
    println("Modifying password")
    password = p
  }
  def validate(p: String) = p == password
}

val u = new User("1234")
u.validate("4567")  // false
u.update("4567")
u.validate("4567")  // true

Private Access Modifiers
------------------------------------------------------------
Package-level and instance-level protections

package com.oreilly {

  private[oreilly] class Config {  // Access to the “Config” class is now restricted to the “com.oreilly” package
    val url = "http://localhost"
  }

  class Authentication {
    private[this] val password = "jason" // Our secretive “password” field is now off-limits to everyone except code within the same instance of the same class.
    def validate = password.size > 0
  }

  class Test {
    println(s"url = ${new Config().url}")
  }
}

// Password access from the same instance
val valid = new com.oreilly.Authentication().validate
// Test class can instantiate Config
new com.oreilly.Test
// But not able to do so outside package
new com.oreilly.Config

Final and Sealed Class
------------------------------------------------------------
- Final class members can never be overridden in subclasses
- Entire classes can be marked as final as well, preventing any possible
subclasses of that class

If final classes are too restrictive for your needs, consider sealed classes instead. Sealed classes restrict the subclasses of a class to being located in the SAME file as the parent class.

E.g. Option is abstract and sealed

============================================================
Objects, Case Classes, Traits
============================================================

Objects i.e. Singleton
------------------------------------------------------------
object <identifier> [extends <identifier>] [{ fields, methods, and classes }]

object Hello { println("in Hello"); def hi = "hi" }
println(Hello.hi)  // The first time will instantiate the Object
println(Hello.hi)

---

object HtmlUtils {
  def removeMarkup(input: String) = {
    input
      .replaceAll("""</?\w[^>]*>""", "")
      .replaceAll("<.*>", "")
  }
}

val html = "<html><body><h1>Introduction</h1></body></html>"
val text = HtmlUtils.removeMarkup(html)  // Returns Introduction

Apply Methods & Companion Objects
------------------------------------------------------------
class Multiplier(val x: Int) { def product(y: Int) = x * y }
// Factory method. Apply has same param as class constructor
object Multiplier { def apply(x: Int) = new Multiplier(x) }  

val tripler = Multiplier(3)  // Do not need 'new' keyword
val result = tripler.product(13)

// Benefit: special access controls that object shares with a companion class
object DBConnection {
  private val db_url = "jdbc://localhost"
  private val db_user = "franken"
  private val db_pass = "berry"

  def apply() = new DBConnection
}

class DBConnection {
  private val props = Map(
    "url" -> DBConnection.db_url,
    "user" -> DBConnection.db_user,
    "pass" -> DBConnection.db_pass
  )
  println(s"Created new connection for " + props("url"))
}

val conn = DBConnection()

Command-Line App with Objects
------------------------------------------------------------
'main' method in Objects (entry point)

object Date {
  def main(args: Array[String]) {
    println(new java.util.Date)
  }
}

---

object Cat {
  def main(args: Array[String]) {
    for (arg <- args) {
      println( io.Source.fromFile(arg).mkString )
    }
  }
}

Case Classes
------------------------------------------------------------
- Instantiable class that includes several automatically generated methods
- Plus the companion objects
- Good for: Data transfer objects

// val is assumed
case class  <identifier> ([var] <identifier>: <type>[, ... ])
            [extends <identifier>(<input parameters>)]
            [{ fields and methods }]

---

case class Character(name: String, isThief: Boolean)

val h = Character("Hadrian", true)  // toString() is generated
val r = h.copy(name = "Royce")
h == r  // equals() is automatically generated
h match {  // unapply() is automatically generated
  case Character(x, true) => s"$x is a thief"
  case Character(x, false) => s"$x is not a thief"
}

Traits: 
------------------------------------------------------------
- Multiple inheritance, cannot be instantiated
- Cannot take class param (like Objects)
- Can take type param

trait <identifier> [extends <identifier>] [{ fields, methods, and classes }]

trait HtmlUtils {
  def removeMarkup(input: String) = {
    input
    .replaceAll("""</?\w[^>]*>""","")
    .replaceAll("<.*>","")
  }
}

class Page(val s: String) extends HtmlUtils {
  def asPlainText = removeMarkup(s)
}

new Page("<html><body><h1>Introduction</h1></body></html>").asPlainText

---
Note: The multiple inheritance ordering, from the lowest subclass up to the highest base class, is right to left.

Self Types
------------------------------------------------------------
A self type is a trait annotation that asserts that the trait must be mixed in with a specific type, or its subtype, when it is added to a class.

trait ..... { <identifier>: <type> => .... }

class A { def hi = "hi" }
// Make sure that B always is a subtype of A
trait B {
  self: A =>
  override def toString: String = "B: " + hi
}
class C extends B  // Will not compile
class C extends A with B  // OK

---

class TestSuite(suiteName: String) { def start() {} }
trait RandomSeeded { self: TestSuite =>
  def randomStart(): Unit = {
    util.Random.setSeed(System.currentTimeMillis)
    self.start()  // trait can call TestSuite.start without knowing in advance
  }
}
class IdSpec extends TestSuite("ID Tests") with RandomSeeded {
  def testId() { println(util.Random.nextInt != 1)}
  override def start() { testId() }
  println("Starting...")
  randomStart()
}

Instantiation with Traits
------------------------------------------------------------
class A
trait B { self: A => }
val a = new A with B

The real value in instantiating with traits is in adding new functionality or configurations to existing classes -> DEPENDENCY INJECTION

class User(val name: String) {
  def suffix = ""

  override def toString: String = s"$name$suffix"
}

trait Attorney { self: User => override def suffix = ", esq."}
trait Wizard { self: User => override def suffix = ", Wizard."}
trait Reverser { override def toString = super.toString.reverse }

val h = new User("Harry P") with Wizard
val g = new User("Ginny W") with Attorney
val l = new User("Luna L") with Wizard with Reverser

Scala POJO and Java Bean
------------------------------------------------------------
https://stackoverflow.com/questions/9673233/how-is-the-pojo-javabean-pattern-treated-in-scala

// @BeanProperty annotation
// Note the use of var not val

class Person(@BeanProperty var firstName: String, @BeanProperty var lastName: String, @BeanProperty var age: Int) {
  
  // Need this for the no-arg constructor
  def this() {
    this(null, null, 0)
  }

}

Enum
------------------------------------------------------------
object WeekDay extends Enumeration {
  type WeekDay = Value
  val Mon = Value("Mon")
  val Tue = Value("Tue") 
}

# Usage
WeekDay.valueOf("Sun") //returns Some(Sun)
WeekDay.Tue.toString   //returns Tue
