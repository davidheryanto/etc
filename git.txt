# Initial setup from existing project
# ------------------------------------------------------------
git init
git add .
git commit -m "First commit"
git remote add origin <remote repository URL>
git remote -v
# Only for first time pushing. We set the upstream
git push -u origin master  
# If need to merge with existing project in origin, do pull first
git pull --allow-unrelated-histories origin master 

# Common workflow: https://stackoverflow.com/questions/14168677/merge-development-branch-with-master
git checkout -b dev
# Do work
git add -A
git commit -m "Work done"
git merge master
# Resolve any merge conflicts if there are any
git checkout master
git merge dev

# Submodules
# ============================================================
# Adding
git submodule add GIT_SUBMODULE_URL [submodule_dir]
# Cloning
git clone --recursive GIT_URL_WITH_SUBMODULE
# If current repo doesn't have submodules configured
# https://stackoverflow.com/questions/3796927/how-to-git-clone-including-submodules
git submodule init 
git submodule update

# To update the submodule in a repo to its latest
# https://stackoverflow.com/questions/5828324/update-git-submodule-to-latest-commit-on-origin
cd submodule_dir
git checkout master
git pull

# Update the repo config so the submodule points to the latest commit
cd ..
git commit -am "Pulled down update to submodule_dir"

# For convenience,
git submodule foreach git pull origin master

# Host git server locally 
# Go Git Service
https://github.com/gogits/gogs

# List all branches
git branch -a

# List branches sort by commit date
git branch -l --sort=committerdate
git branch -l --sort=-committerdate  # Reversed

# List all remote branch
git branch -r / --remote

# Make current local branch track a remote branch
git branch -u upstream/foo

# Additionally, prune stale remote branches first 
git remote prune origin && git branch -r

# List branches that have been merged into the current branch
# https://stackoverflow.com/a/28464339/3949303
git branch --merged

# Add remote url 
git remote add {remote-name} {remote-url}
# Show / Verify new remote
git remote -v
# Push to new remote 
git push {remote-name} {branch-name}
# e.g. git push origin master

# Update the remote url
git remote show origin 
git remote set-url origin git://new.url.here

# Create remote branch
git checkout -b newbranch [REMOTE/BRANCH]
git push -u origin newbranch

# Clean local git repo for referencing expired remote branch
git remote prune <remote-name>

# Refresh local repo with updated remote branch
git remote update

# Refresh list of remote branches
git remote update origin --prune

# Checkout remote branch: https://stackoverflow.com/a/1783426/3949303
git fetch origin 'remote_branch':'local_branch_name'
# May need to run this first: git fetch REMOTE_NAME
git checkout --track/-t REMOTE_NAME/REMOTE_REF

# Delete remote branch
git push --delete/-d origin <branchName>
# Delete local branch
git branch --delete/-d mybranch

# Delete all local branches except master
# https://stackoverflow.com/questions/28572293/can-i-delete-all-the-local-branches-except-the-current-one
git branch | grep -v "master" | xargs git branch -D 

# Meaning of HEAD~ and HEAD^
# https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git
G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     \|/    |
      B     C
       \   /
        \ /
         A

A =      = A^0
B = A^   = A^1     = A~1
C = A^2  = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2

# Merge two commits into one 
# http://stackoverflow.com/questions/2563632/how-can-i-merge-two-commits-into-one
git rebase --interactive HEAD~2
# Then squash from the last line commits (i.e. most recent)

# Squash commits after pushing 
# http://stackoverflow.com/questions/5667884/how-to-squash-commits-in-git-after-they-have-been-pushed
git rebase -i origin/master~4 master  # Squash commits locally 
git push --force origin master        # Force push

# Undo git rebase
# https://stackoverflow.com/questions/134882/undoing-a-git-rebase
git reflog  # Find which head to reset to, e.g it's HEAD@{5}
git reset --hard HEAD@{5}

# pull --force: Force git pull overwriting local file: http://stackoverflow.com/questions/1125968/how-to-force-git-pull-to-overwrite-local-files
git fetch --all
git reset --hard origin/master
# Alternative: http://stackoverflow.com/questions/9589814/how-do-i-force-git-pull-to-overwrite-everything-on-every-pull
git fetch origin master
git reset --hard FETCH_HEAD

# Check whether a branch has been merged (usually means safe to delete)
# http://stackoverflow.com/questions/226976/how-can-i-know-in-git-if-a-branch-has-been-already-merged-into-master
git branch --merged  # Check which branch has been merged to HEAD

# Create branch
git branch newbranch
# Create branch and checkout
git checkout -b newbranch

# Push the local branch to remote
# https://stackoverflow.com/questions/2765421/how-do-i-push-a-new-local-branch-to-a-remote-git-repository-and-track-it-too
git push -u origin <branch>

# Undo working copy modifications
# http://stackoverflow.com/questions/692246/undo-working-copy-modifications-of-one-file-in-git
git checkout -- .               # For all files
git checkout -- modified_file 
# If there are still untracked files, can remove with
# git clean -fd

# Remove files from index after updating .gitignore
# http://stackoverflow.com/questions/1274057/making-git-forget-about-a-file-that-was-tracked-but-is-now-in-gitignore
git rm -r --cached .
git rm --cached <file-name>
git rm --cached *.sql

# Where does Git store global config: ~/.gitconfig

# Global gitignore
git config --global core.excludesfile '~/.gitignore'

# Ignore patterns
# https://www.atlassian.com/git/tutorials/saving-changes/gitignore

**/logs: matches any directory/folder
**/logs/debug.log
*.log
/debug.log: Prepending a slash matches files only in the repository root

.ipynb_checkpoints/
.idea/
*.orig
ignore_me/

# Check which files will be pushed
git diff --stat --cached origin/master

# Git show difference between added (staged) file and HEAD
git diff --cached (or git diff --staged)

# Resolving conflict when only want to use ours / theirs version
# When state is in conflict
# Search for all conflicting files
grep -lr '<<<<<<<' .
git checkout --ours filepath
git checkout --theirs filepath
git add -A
git commit

# Accept theirs for ALL files
grep -lr '<<<<<<<' . | xargs git checkout --theirs

# For all files, think this will work too?
# git checkout --ours .

# Setup mergetool
1.Add the KDiff3 directory to your Windows System Path (e.g. C:\Program Files\KDiff3\)
2.Add kdiff3 as your Git mergetool (From Git Bash, run git config --global merge.tool kdiff3)
3.Add kdiff3 complete path to Git Config (From Git Bash, run git config --global mergetool.kdiff3.path "C:/Program Files/KDiff3/kdiff3.exe")
4.Go into Git GUI settings and set the mergetool to kdiff3 (if Git GUI doesn't pick up this setting from git config, which it should)
# In CentOS, after sudo dnf -y install kdiff3
git config --global merge.tool kdiff3

After that, to use (when conflict present): git mergetool

# Create alias
git config --global alias.lol "log --oneline --graph --decorate --all"

# Videos that explain git reset, default is --mixed
https://www.youtube.com/watch?v=220qkGeEn6A   # soft: normally to group commits
https://www.youtube.com/watch?v=aYNOCvVevic   # mixed
https://www.youtube.com/watch?v=V66d5e8Ku4w   # hard

# removes staged and working directory changes
# sometimes need to do this first:
# git rm --cached -r .
git reset --hard 

# remove untracked files(-f) and directory (-d)
git clean -fd --dry-run  # Verify first, no going back!
git clean -fd 

# Git show log with files changed
# https://stackoverflow.com/questions/1230084/how-to-have-git-log-show-filenames-like-svn-log-v
git log -n3 --name-status
git log -n3 --stat

# Git show difference between 2 commits
git diff SHA1 SHA2
# Show the name, with status, M:modified. R:renamed etc
git diff --name-status SHA1 SHA2

# Git show log with author, date and message
git log --pretty=format:"%Cred%h %Cgreen%aI %Cblue%an: %Creset%s" -n 3
git log --pretty=format:"%h%x09%an%x09%ad%x09%s"

# Check history of file 
# https://stackoverflow.com/questions/278192/view-the-change-history-of-a-file-using-git-versioning
git log --follow -p -- /path/to/file

# Undo git add
git reset
git reset SPECIFIC_FILE

# Undo, revert to specific commit 
# https://stackoverflow.com/questions/1463340/how-to-revert-multiple-git-commits/1470452#1470452
# i.e. A--B--C--master ==> A--B--C--A'--master
git revert --no-commit <commit-A>..
git revert --no-commit HEAD~2..
# Then after reverting, commit and push it

# Revert specific file to specific revision
git checkout <commit> -- <filename>

# Changing last commit examples
git commit -m 'initial commit'
git add forgotten_file
git commit --amend

# Working on wrong branch - how to copy changes to existing topic branch
git stash
git checkout branch123
git stash apply
# OR below, equivalent to: git stash apply && git stash drop
git stash pop 

# List stash 
git stash list 

# Drop the top stash 
git stash drop  
# Drop a specific stash
git stash drop stash@{0}

# Set upstream branch, i.e. push local branch to remote
git push [--set-upstream|-u] <upstream> <branch>
i.e. git push -u origin newbranch

# Set remote tracking, upstream is normally origin
git branch --set-upstream-to=upstream/foo fooh OR
git branch -u upstream/foo foo

# Combine many commits into fewer commits
# When merging different branch to master
git rebase -i master

# Set default push behaviour
git config --global push.default simple

# Undo last commit
# http://stackoverflow.com/questions/927358/undo-the-last-git-commit
git reset --soft HEAD~1

# Undo git add
git reset

# Undo git add for specific file
git reset HEAD <file>

# Google chrome
http://chrome.richardlloyd.org.uk/

# Set global profile
git config --global user.name "David Heryanto"
git config --global user.email david.heryanto@hotmail.com
git config --global push.default simple

# Set local profile - only for one repo
git config user.name "David Heryanto"
git config user.email david.heryanto@hotmail.com

# Change how git handles line endings: Windows
# https://help.github.com/articles/dealing-with-line-endings/
git config --global core.autocrlf true

# Remove LF replaced with CRLF warning
git config --global core.safecrlf false

# See log, --all includes unmerged branches, --stat shows what files changed
git log [-count] [--oneline] [--graph] [--decorate] [--all] 
--stat     # See files involved
--patched  # See the content changed
# See log which file is deleted or modified or added
git log --name-status

# See all file changes between commits
git diff --name-status START_COMMIT..END_COMMIT

# See diff or changes in a file between 2 commits
git diff HEAD^^ HEAD main.c
git diff HEAD~2 HEAD -- main.c

# See diff b/w staged and recent commits
git diff --staged
git diff HEAD  # Combine chg in working & staged, compare with HEAD

# Github hooks auto pull
In Windows important to set HOME environment var to %USERPROFILE%
e.g. in php 
	<?php echo putenv("HOME=C:\Users\Administrator");
http://code.tutsplus.com/tutorials/the-perfect-workflow-with-git-github-and-ssh--net-19564
https://gist.github.com/cowboy/619858
http://jondavidjohn.com/git-pull-from-a-php-script-not-so-simple/
# May need to disable selinux (see linux_commands.txt)

# (gnome-ssh-askpass:7807): Gtk-WARNING **: cannot open display:
http://stackoverflow.com/questions/16077971/git-push-produces-gtk-warning
unset SSH_ASKPASS

# Remove local untracked files
http://stackoverflow.com/questions/61212/how-do-i-remove-local-untracked-files-from-my-current-git-branch
git clean -f --dry-run (preview what's coming)
git clean -f -d (-d includes directory)

# Show local commit history
git reflog

# Refresh local tags from remote
git fetch --tags --force

# List tag 
git tag -l 
# Sort in descending order
git tag -l --sort=-v:refname
# Sort in ascending order
git tag -l --sort=v:refname

# Add tag
git tag -a v1.4 -m 'my version 1.4'
git tag -a v1.5 -m '' # No message
git push --follow-tags

# Tag previous commit
# https://stackoverflow.com/questions/4404172/how-to-tag-an-older-commit-in-git
git tag -a v1.2 9fceb02 -m "Message here"

# Remove or delete tag
git tag -d 12345  # Local tag
git push --delete origin YOUR_TAG_NAME  # Remote tag
git push origin :refs/tags/12345  # Alternative for remote tag

# Add folder to Places in nautilus
vim ~/.config/gtk-3.0/bookmarks 

# Save password in cache
git config --global credential.helper cache  # Default 15m
git config --global credential.helper "cache --timeout=86400"  # 24 hours

# Reset credential.helper 
git config --global --unset credential.helper

# Github commits API
# https://developer.github.com/v3/repos/commits/
GET api.github.com/repos/:owner/:repo/commits
GET api.github.com/repos/lisa-lab/pylearn2/commits?until=2014-01-01T16:00:49Z

# Git setup proxy
git config --global https.proxy https://user:password@proxy.company.com:8888

# Reset proxy
git config --global --unset http.proxy
git config --global --unset https.proxy

# Setup proxy in Windows. Set this environment variable
https_proxy=remote.proxy.com:8080
GIT_SSL_NO_VERIFY=true

# Only clone the last 10 revision 
git clone --depth=10 <url>
# Remove data from repository
https://help.github.com/articles/remove-sensitive-data/

# Specify private key when using git
# https://stackoverflow.com/questions/4565700/specify-private-ssh-key-to-use-when-executing-shell-command-with-or-without-ruby
ssh-agent bash -c 'ssh-add /somewhere/yourkey; git clone git@github.com:user/project.git'

# Use https instead of git for github. Note git usually writes global config to ~/.gitconfig
# https://github.com/npm/npm/issues/5257
git config --global url."https://github.com/".insteadOf git@github.com:
git config --global url."https://".insteadOf git://

# Use git instead of https
git config --global url.git@github.com:.insteadOf https://github.com/
git config --global url.git@gitlab.mycompany.com:.insteadOf https://gitlab.mycompany.com/


#.gitignore all folder with name: <folder-name>
# http://stackoverflow.com/questions/1470572/gitignore-ignore-any-bin-directory
<folder-name>/

# Git ignore certificate error
# http://stackoverflow.com/questions/11621768/how-can-i-make-git-accept-a-self-signed-certificate
git config --global http.sslVerify false
# Only for single command
git -c http.sslVerify=false clone https://domain.com/path/to/git
# Initial clone 
GIT_SSL_CAINFO=/etc/ssl/certs/rorcz_root_cert.pem git clone https://repo.or.cz/org-mode.git
# Add the path to cert
git config http.sslCAInfo /c/Users/user1/mycert.crt
# Alternatively, to ignore ssl for certain repo: edit .git/config
[http]
	sslVerify = false

# Exclude only for MY repo
.git/info/exclude

# Create new SSH key
# https://help.github.com/articles/generating-a-new-ssh-key/
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

# Access git ssh with port other than 22
# http://stackoverflow.com/questions/3596260/git-remote-add-with-other-ssh-port
git remote add origin ssh://user@host:1234/srv/git/example

# Difference between ~ and ^: ~ is fuzzy, ^ is precise
# https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git
G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     \|/    |
      B     C
       \   /
        \ /
         A

A =      = A^0
B = A^   = A^1     = A~1
C = A^2  = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2

# BFG Repo Cleaner
# https://rtyley.github.io/bfg-repo-cleaner/

# Replace sensitive text in Git history
# 1. Create a file showing the replacement needed
vim /tmp/replacement

secret==>REMOVED
password==>deleted

# Apply bfg replacement
bfg --replace-text /tmp/replacement

# Force push
git reflog expire --expire=now --all && git gc --prune=now --aggressive
git push -f origin master

# Exclude, skip specific commit when merging: create a new branch, do rebase, drop the commit
# https://stackoverflow.com/questions/332528/is-it-possible-to-exclude-specific-commits-when-doing-a-git-merge
git checkout -b newbranch
git rebase -i HEAD~3  # Review most recent 3 commits
# drop the commit to exclude

# Quickly browse history of Git repo
yarn global add git-file-history
git-file-history path/to/file.ext

# Checkout pull request
# https://stackoverflow.com/questions/27567846/how-can-i-check-out-a-github-pull-request
git fetch origin pull/PULL_REQUEST_ID/head:NEW_BRANCH_NAME
 
# Cherry pick commit
git cherry-pick COMMIT_SHA
git cherry-pick -x ...  # append commit name, useful when cherry-picking from 
                        # public branch for easier tracking
git cherry-pick --abort

# Show commits that "master" has but "mybranch" does not
# https://stackoverflow.com/a/24186641
git log mybranch..master
git log mybranch..master --oneline