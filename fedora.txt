============================================================
Fedora 42
============================================================
# Install development tools
# e.g. needed when installing official Nvidia drivers
sudo dnf install @development-tools

# Nvidia, fix memory not preserving video memory on suspend
# https://bbs.archlinux.org/viewtopic.php?id=274043
# sudo vim /etc/modprobe.d/nvidia-power-management.conf
options nvidia NVreg_PreserveVideoMemoryAllocations=1 NVreg_TemporaryFilePath=/var/nvidia-tmp
# Then run the following
sudo systemctl enable nvidia-suspend.service nvidia-resume.service nvidia-hibernate.service

============================================================
Fedora 39
============================================================

Gnome extensions
================
- No overview on startup: https://extensions.gnome.org/extension/4099/no-overview/ 
- Dash to pane: https://extensions.gnome.org/extension/1160/dash-to-panel/ 
- System tray: https://extensions.gnome.org/extension/615/appindicator-support/ 
- Resource monitor: https://extensions.gnome.org/extension/1634/resource-monitor/

Quick setup
===========
- settings / shortcut / gnome-terminal
- settings / animation / reduce
- sudo dnf -y install vim-default-editor.noarch --allowerasing
- visudo / uncomment wheel nopasswd
- copy ~/.local/share/fonts / fc-cache -f ~/.local/share/fonts # helvetica,inter.ttc,sf-mono
- sudo dnf upgrade
- sudo dnf -y install gnome-tweaks gnome-extensions-app unar htop nethogs iotop keepassxc aria2 alacarte gnome-shell-extension-system-monitor
- tweaks / font / monospace / sf mono regular
- settings / sound / volume levels / mute system sounds
- sublime text https://www.sublimetext.com/docs/linux_repositories.html 
- sublime merge https://www.sublimemerge.com/docs/linux_repositories 
- Miniconda
- JetBrains Toolbox
- Docker
- vim ~/.bashrc
```
export LS_COLORS='di=01;94:'
export PS1='\[\e[38;5;183m\]\u@\h \[\e[38;5;252m\]\W\[\e[0m\]\$ '
```
- git config --global core.excludesfile '~/etc/.gitignore'

Nvidia driver
=============
- https://www.if-not-true-then-false.com/2015/fedora-nvidia-guide/ 
- sudo dnf install kernel-devel kernel-headers gcc make dkms acpid libglvnd-glx libglvnd-opengl libglvnd-devel pkgconfig
- sudo su - 
- echo "blacklist nouveau" >> /etc/modprobe.d/blacklist.conf
- vim /etc/default/grub
  GRUB_CMDLINE_LINUX="..... rhgb quiet rd.driver.blacklist=nouveau nvidia-drm.modeset=1"
- grub2-mkconfig -o /boot/grub2/grub.cfg
- dnf remove xorg-x11-drv-nouveau
- dracut /boot/initramfs-$(uname -r).img $(uname -r) --force
- systemctl set-default multi-user
- reboot
- sudo systemctl isolate graphical # Then check everything OK
- sudo systemctl set-default graphical
- Install CUDA. Follow installation summary: update PATH and LD config
- Fix CUDA error after suspend
  sudo vim /etc/modprobe.d/nvidia-power-management.conf
  """
  options nvidia NVreg_PreserveVideoMemoryAllocations=1 NVreg_TemporaryFilePath=/var/nvidia-tmp
  """
  systemctl enable nvidia-suspend && systemctl enable nvidia-hibernate
  - https://bbs.archlinux.org/viewtopic.php?id=274043
  - https://wiki.archlinux.org/title/NVIDIA/Tips_and_tricks#Preserve_video_memory_after_suspend
- If have both integrated CPU and Nvidia, and prefer to use integrated for display and gnome, edit /etc/environment, add line:
  __EGL_VENDOR_LIBRARY_FILENAMES=/usr/share/glvnd/egl_vendor.d/50_mesa.json
  (https://gitlab.gnome.org/GNOME/mutter/-/issues/2969)


Keyboard shortcuts
==================
- Open Terminal / gnome-terminal / Ctrl + Shift + T

Font substitution
=================
Config file: ~/.fonts.conf

<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">

<fontconfig>
  <!-- Replace Courier with a better-looking font -->
  <match target="pattern">
    <test name="family" qual="any"><string>Courier New</string></test>
    <edit name="family" mode="assign">
      <string>SF Mono</string>
    </edit>
  </match>
  <match target="pattern">
    <test name="family" qual="any"><string>Liberation Mono</string></test>
    <edit name="family" mode="assign">
      <string>SF Mono</string>
    </edit>
  </match>
  <match target="pattern">
    <test name="family" qual="any"><string>Monaco</string></test>
    <edit name="family" mode="assign">
      <string>SF Mono</string>
    </edit>
  </match>
  <match target="pattern">
    <test name="family" qual="any"><string>Consolas</string></test>
    <edit name="family" mode="assign">
      <string>SF Mono</string>
    </edit>
  </match>
  <match target="pattern">
    <test name="family" qual="any"><string>Source Code Pro</string></test>
    <edit name="family" mode="assign">
      <string>SF Mono</string>
    </edit>
  </match>
  <match target="pattern">
    <test name="family" qual="any"><string>Cantarell</string></test>
    <edit name="family" mode="assign">
      <string>Inter</string>
    </edit>
  </match>
  <match target="pattern">
    <test name="family" qual="any"><string>Helvetica</string></test>
    <edit name="family" mode="assign">
      <string>Inter</string>
    </edit>
  </match>
  <match target="pattern">
    <test name="family" qual="any"><string>Helvetica Neue</string></test>
    <edit name="family" mode="assign">
      <string>Inter</string>
    </edit>
  </match>
  <match target="pattern">
    <test name="family" qual="any"><string>Segoe UI</string></test>
    <edit name="family" mode="assign">
      <string>Inter</string>
    </edit>
  </match>
  <match target="pattern">
    <test name="family" qual="any"><string>Noto Sans</string></test>
    <edit name="family" mode="assign">
      <string>Inter</string>
    </edit>
  </match>
  <match target="pattern">
    <test name="family" qual="any"><string>sans-serif</string></test>
    <edit name="family" mode="assign">
      <string>Inter</string>
    </edit>
  </match>
</fontconfig>

Maestral
========
- https://maestral.app/docs/installation 
- mkdir ~/Apps && cd ~/Apps
- /usr/bin/python3 -m venv maestral-venv
- source maestral-venv/bin/activate
- pip install -U maestral[gui] importlib-metadata
- sudo dnf install python3-systemd
- mkdir ~/bin
- ln -s ~/Apps/maestral-venv/bin/maestral ~/bin/maestral
- maestral start
- maestral autostart -Y
- systemctl --user status maestral-daemon@maestral

============================================================
Getting started apps
============================================================
- Sublime Text
- Keepassx
- Kdiff3
- Dropbox

Things for first install
============================================================
- Setup global .gitignore
- Setup fonts (SF Mono, SF Text)
- Install Anaconda, JDK, Docker
- Install Sublime Text and Smerge (and extensions), JetBrains Apps, Keepass2x, 
  Dropbox, Google Chrome, Kdiff3
- Ksnip screenshot annotator https://github.com/ksnip/ksnip/releases
- Tiling terminal emulator: sudo dnf -y install tilix
  $ tilix --preferences
- Setup keyboard shortcuts: Ctrl+Alt+T: tilix
- RPM Fusion: 
  sudo dnf -y install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-29.noarch.rpm
- Install gnome-mpv (requires rpmfusion repo)

# Open file with gnome-open on Terminal. Need to install libgnome
sudo dnf -y install libgnome

# Install development tools
sudo dnf install @development-tools

# Materia theme
sudo dnf copr enable tcg/themes
sudo dnf -y install materia-gtk-theme

# Important after installing Dropbox
# Update no of inotify watchers, useful for dropbox daemon
echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf; sudo sysctl -p --system

# Arc theme
sudo dnf -y install arc-theme

# Troubleshoot / Debug SELinux: https://fedoramagazine.org/troubleshooting-selinux/
sudo dnf install setroubleshoot # Then open the app SELinux Alert Browser

============================================================
Fedora 35
============================================================
# Install NVIDIA Container Toolkit
distribution=rhel9.0
curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.repo | sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo
sudo dnf install nvidia-container-toolkit

# Fix error "Failed to initialize NVML: Insufficient Permissions", likely due to SELinux
# https://github.com/NVIDIA/nvidia-container-toolkit/issues/33
sudo setsebool -P container_use_devices 1
sudo ausearch -c 'nvidia-smi' --raw | audit2allow -M my-nvidiasmi
sudo semodule -i my-nvidiasmi.pp

============================================================
Fedora 27 and CUDA 9.0 and Tensorflow 1.5.0
============================================================

# Download specific version of CUDA: https://developer.nvidia.com/cuda-toolkit-archive
sudo bash cuda_9.0.176_384.81_linux.run --override
echo "/usr/local/cuda-9.0/lib64" >> /etc/ld.so.conf.d/cuda-9.0.conf
sudo ldconfig

# After extracting cudnn-9.1-linux-x64-v7.tgz
sudo cp cuda/include/cudnn.h /usr/local/cuda-9.0/include
sudo cp -P cuda/lib64/libcudnn* /usr/local/cuda-9.0/lib64

pip install -U tensorflow-gpu==1.5.0

============================================================
Setup GTX 750 Ti on Fedora 29
============================================================
# https://www.if-not-true-then-false.com/2015/fedora-nvidia-guide/

# Note
With SecureBoot enabled, installing the driver requires signing of the kernel modules etc
Not sure how to do it properly
Better just disable SecureBoot

# Install pre-requisites
sudo dnf -y install gcc "kernel-devel-uname-r == $(uname -r)" elfutils-libelf-devel

# Disable nouveau driver which may conflict with driver from NVidia
# https://kaischroed.wordpress.com/howto-install-nvidia-driver-on-fedora-replacing-nouveau/
echo 'blacklist nouveau' >> /etc/modprobe.d/disable-nouveau.conf

# Disable nouveau from grub
# Append rd.driver.blacklist=nouveau to end of GRUB_CMDLINE_LINUX in /etc/sysconfig/grub
vim /etc/sysconfig/grub  # Add rd.driver.blacklist=nouveau, then
grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg

# Alternatively, (above method is preferred)
# Edit grub.cfg (/boot/grub2/grub.cfg or /boot/efi/EFI/fedora/grub.cfg)
# Why? Fedora package nouveau as part of boot image
# Add rd.driver.blacklist=nouveau, e.g. 
/vmlinuz-3.6.3-1.fc17.x86_64 root=/dev/mapper/vg_fedo-lv_root ro rd.lvm.lv=vg_fedo/lv_swap rd.md=0 rd.dm=0 SYSFONT=True rd.lvm.lv=vg_fedo/lv_root rd.luks=0  KEYTABLE=es LANG=en_US.UTF-8 rd.driver.blacklist=nouveau rhgb quiet

# Reboot to runlevel 3, i.e. without desktop GUI
systemctl set-default multi-user.target; reboot

# Execute .run file
./NVIDIA-Linux-x86_64-304.60.run

# Install CUDA: https://developer.nvidia.com/cuda-downloads
# Add: /usr/local/cuda-8.0/lib64 to /etc/ld.so.conf (Alternative to LD_LIBRARY_PATH)
sudo ldconfig
# Add to .bashrc
PATH=/usr/local/cuda-8.0/bin:$PATH

# Reboot back to runlevel 5, with desktop GUI
systemctl set-default graphical.target; reboot

# To upgrade existing driver, sometimes need to unload nvidia-drm module
# https://unix.stackexchange.com/questions/440840/how-to-unload-kernel-module-nvidia-drm/441079
sudo systemctl isolate multi-user.target

# For CUDA 8.0 gcc 6 is not supported yet, need to downgrade
============================================================
# Use gcc version 5.4.0
PATH=/usr/local/gcc/5.4.0/bin:$PATH

# CUDA 
PATH=/usr/local/cuda-8.0/bin:$PATH
============================================================

# Install earlier version of gcc e.g. in Fedora 24 (install gcc 5, instead of using gcc 6)
# Make sure "make -j4" set -j to be max no of core because compiling gcc takes a long time 
# CUDA 8.0 not yet support gcc 6
# Need flex parser, texinfo to compile gcc: sudo dnf -y install flex texinfo
Download gcc 5.4: https://gcc.gnu.org/gcc-5/
./contrib/download_prerequisites
./configure --prefix=/usr/local/gcc/5.4.0 [--disable-multilib]
make -j4
sudo make install

Using older gcc
---------------
Add /usr/local/gcc/5.4.0/bin to PATH
Add /usr/local/gcc/5.4.0/lib64 to /etc/ld.so.conf 
sudo ldconfig 

Alternatively
-------------
# http://stackoverflow.com/questions/6622454/cuda-incompatible-with-my-gcc-version
sudo ln -s /usr/local/gcc/5.4.0/bin/gcc /usr/local/cuda/bin/gcc
sudo ln -s /usr/local/gcc/5.4.0/bin/g++ /usr/local/cuda/bin/g++

# Install cuDNN https://developer.nvidia.com/rdp/cudnn-download
# After extracting the archive, copy these files from cuDNN directory
sudo cp -av lib/* /usr/local/cuda/lib64/  # -av preserves symbolic link
sudo cp include/* /usr/local/cuda/include/
sudo ldconfig

# May give this error: ldconfig: /usr/local/cuda-8.0/lib64/libcudnn.so.5 is not a symbolic link
# Because there are identical libcudnn.so.5 and libcudnn.so.5.1.5
sudo mv /usr/local/cuda-8.0/lib64/libcudnn.so.5 /usr/local/cuda-8.0/lib64/libcudnn.so.5.bak
sudo ln -s /usr/local/cuda-8.0/lib64/libcudnn.so.5.1.5 /usr/local/cuda-8.0/lib64/libcudnn.so.5
sudo ldconfig 

============================================================
For laptop with Optimus graphics i.e. switchable integrated & discrete gpu
-> https://superuser.com/questions/282734/how-to-disable-nvidia-optimus-on-a-dell-xps-15

Install bumblebee nvidia driver (Fedora 25):
# https://fedoraproject.org/wiki/Bumblebee
sudo dnf -y --nogpgcheck install http://install.linux.ncsu.edu/pub/yum/itecs/public/bumblebee/fedora$(rpm -E %fedora)/noarch/bumblebee-release-1.2-1.noarch.rpm
sudo dnf -y --nogpgcheck install http://install.linux.ncsu.edu/pub/yum/itecs/public/bumblebee-nonfree/fedora$(rpm -E %fedora)/noarch/bumblebee-nonfree-release-1.2-1.noarch.rpm
sudo dnf install -y bumblebee-nvidia bbswitch-dkms primus kernel-devel


sudo dnf -y --nogpgcheck install http://install.linux.ncsu.edu/pub/yum/itecs/public/bumblebee/fedora25/noarch/bumblebee-release-1.2-1.noarch.rpm
sudo dnf -y --nogpgcheck install http://install.linux.ncsu.edu/pub/yum/itecs/public/bumblebee-nonfree/fedora25/noarch/bumblebee-nonfree-release-1.2-1.noarch.rpm
sudo dnf install bumblebee-nvidia bbswitch-dkms primus kernel-devel

Add current user to 'bumblebee' group so can run optirun w/o sudo:
usermod -a -G bumblebee davidheryanto

# Usage:
optirun nvidia-smi
optirun python mnist_mlp.py (keras)

============================================================

# Theano configuration 
Flags to use gpu http://deeplearning.net/software/theano/install.html#using-the-gpu
Check if code can use gpu http://deeplearning.net/software/theano/tutorial/using_gpu.html

# In Fedora23, the default login manager gdm may have some problem
# Replace gdm with lightdm
systemctl stop gdm
systemctl disable gdm
dnf -y install lightdm
systemctl enable lightdm

# Disable Fedora Gnome auto update
/usr/bin/gsettings set org.gnome.software allow-updates false
/usr/bin/gsettings set org.gnome.software download-updates false

# Alternatively install dconf-editor and adjust the settings from there
sudo dnf -y install dconf-editor

# Disable PackageKit from update
sudo /usr/bin/gpk-prefs
Select 'Never'

============================================================

# Install Microsoft SQL Server: https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup-red-hat
sudo su
curl https://packages.microsoft.com/config/rhel/7/mssql-server.repo > /etc/yum.repos.d/mssql-server.repo
exit
sudo yum install -y mssql-server
sudo /opt/mssql/bin/sqlservr-setup
systemctl status mssql-server
sudo firewall-cmd --zone=public --add-port=1433/tcp --permanent
sudo firewall-cmd --reload

# Packages
texlive-latex: Latex

# G++ or gcc error:/usr/lib/rpm/redhat/redhat-hardened-cc1: No such file or directory
sudo dnf install redhat-rpm-config

# Launch settings from command line 
/usr/bin/gnome-control-center

# Enable fastest mirror for dnf / yum
# vim /etc/dnf/dnf.conf
[main]
gpgcheck=1
installonly_limit=3
clean_requirements_on_remove=True
fastestmirror=true

# Zoom or magnifier for Gnome 3
Super + Alt + 8    (Toogle zoom enabled/disabled)
Super + Alt + '+'  (Increase zoom level)
Super + Alt + '-'  (Decrease zoom level)


VLC
============================================================
Sometimes, the seeking is very slow. How to fix:
- Tools > Preferences > Video > Output: OpenGL video output

Docker 
============================================================
sudo dnf config-manager \
    --add-repo \
    https://download.docker.com/linux/fedora/docker-ce.repo
sudo dnf install docker-ce

# Sometimes if Fedora version is too new (unsupported)
vim /etc/yum.repos.d/docker-ce.repo
Then, replace $releasever to supported Fedora version


Hi-DPI Experimental Features: Fractional Scaling
============================================================
https://www.youtube.com/watch?v=yq1BRoG1JC0

sudo dnf -y install dconf-editor

> org.gnome.mutter.experimental-features
/org/gnome/mutter/experimental-features

Install Protobuf from source 
============================================================
git clone --depth=1 https://github.com/google/protobuf
sudo dnf -y install autoconf automake libtool curl make
cd protobuf && ./autogen.sh

# Use --prefix=/usr, otherwise need to set LD_LIBRARY_PATH=/usr/local/lib
./configure --prefix=/usr
make -j4
make check
sudo make install
sudo ldconfig # refresh shared library cache.

cd python
python setup.py build --cpp_implementation
python setup.py test --cpp_implementation
python setup.py install --cpp_implementation

Fedora 29: Install Docker CE
============================================================
# https://github.com/docker/for-linux/issues/430
# From F29
dnf install https://download.docker.com/linux/fedora/29/x86_64/nightly/Packages/docker-ce-cli-0.0.0.20181027050239.c7c18e3-0.fc29.x86_64.rpm
# From F28, as the docker-ce requires `containerd.io` to be installed (instead of containerd in system?)
dnf install https://download.docker.com/linux/fedora/28/x86_64/stable/Packages/containerd.io-1.2.0-2.2.rc.2.1.fc28.x86_64.rpm
# From F29
dnf install https://download.docker.com/linux/fedora/29/x86_64/nightly/Packages/docker-ce-0.0.0.20181027050239.c7c18e3-0.fc29.x86_64.rpm

# Upgrade Fedora
# https://fedoramagazine.org/upgrading-fedora-28-fedora-29/
sudo dnf upgrade --refresh
sudo dnf install dnf-plugin-system-upgrade
sudo dnf system-upgrade download --releasever=29
# If there's error with broken dependencies
# Use --allowerasing option
sudo dnf system-upgrade reboot

Sample .bashrc
============================================================
# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# To easily pipe and copy text in Terminal
alias xclip="xclip -selection c"

# Java 
export JAVA_HOME=/usr/java/jdk1.8.0_172-amd64
export PATH=$JAVA_HOME/bin:$PATH

# Golang environment: GOPATH is path to local packages, GOROOT is home path to compiler/tools
# https://golang.org/doc/code.html#GOPATH
# https://stackoverflow.com/questions/7970390/what-should-be-the-values-of-gopath-and-goroot
export GOPATH=/home/dheryanto/go
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

# Maven
export PATH=/opt/maven/bin:$PATH

# Gradle
export PATH=/opt/gradle/bin:$PATH


# Google Cloud
export PATH=/home/dheryanto/google-cloud-sdk/bin:$PATH

# Node.js
export PATH=/home/dheryanto/node.js/bin:$PATH

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# added by Anaconda3 installer
export PATH="/home/dheryanto/anaconda3/bin:$PATH"

# Wine
export WINEARCH=win32

# DNS resolver service
sudo systemctl start systemd-resolved

# Gnome disable Ctrl+Shift+E emoji typing shortcut
# https://ask.fedoraproject.org/en/question/120675/terminator-vs-ctrl-shift-e-gnome-key-how-to-disable-gnome-key-intervention/
ibus-setup > emoji > disable shorcut

# grpc-java on Fedora 30 requires
# TLS with netty-tcnative on BoringSSL but will throw *.so not found exception
# https://github.com/grpc/grpc-java/blob/master/SECURITY.md
# So need to install compatibility library for libxcrypt
sudo dnf -y install libxcrypt-compat

# Fedora 30 Error:
# The target you are trying to run requires an OpenSSL implementation.
# Your system doesn't have one, and either the third_party directory
# doesn't have it, or your compiler can't build BoringSSL
sudo dnf -y install compat-openssl10-devel

# Install materia theme
# https://github.com/nana-4/materia-theme
sudo dnf copr enable tcg/themes
sudo dnf -y install materia-gtk-theme.noarch

# Install grpc_cli on Fedora 30
# https://github.com/grpc/grpc/blob/master/doc/command_line_tool.md
sudo dnf -y install grpc-cli

# Gnome dynamic Catalina wallpapers
# Wallpaper download link
https://drive.google.com/open?id=1S0EhuYPXK63pHk8MQ_Ac8H3NrMSsei4u
# Copy the .tiff images to /usr/share/backgrounds/gnome

cat <<EOF > /usr/share/backgrounds/gnome/catalina-timed.xml
<background>
  <starttime>
    <year>2011</year>
    <month>11</month>
    <day>24</day>
    <hour>7</hour>
    <minute>00</minute>
    <second>00</second>
  </starttime>

<!-- This animation will start at 7 AM. -->

<!-- We start with sunrise at 7 AM. It will remain up for 1 hour. -->
<static>
<duration>3600.0</duration>
<file>/usr/share/backgrounds/gnome/Catalina-3.tiff</file>
</static>

<!-- Sunrise starts to transition to day at 8 AM. The transition lasts for 5 hours, ending at 1 PM. -->
<transition type="overlay">
<duration>18000.0</duration>
<from>/usr/share/backgrounds/gnome/Catalina-3.tiff</from>
<to>/usr/share/backgrounds/gnome/Catalina-1.tiff</to>
</transition>

<!-- It's 1 PM, we're showing the day image in full force now, for 5 hours ending at 6 PM. -->
<static>
<duration>18000.0</duration>
<file>/usr/share/backgrounds/gnome/Catalina-1.tiff</file>
</static>

<!-- It's 7 PM and it's going to start to get darker. This will transition for 6 hours up until midnight. -->
<transition type="overlay">
<duration>21600.0</duration>
<from>/usr/share/backgrounds/gnome/Catalina-1.tiff</from>
<to>/usr/share/backgrounds/gnome/Catalina-2.tiff</to>
</transition>

<!-- It's midnight. It'll stay dark for 5 hours up until 5 AM. -->
<static>
<duration>18000.0</duration>
<file>/usr/share/backgrounds/gnome/Catalina-2.tiff</file>
</static>

<!-- It's 5 AM. We'll start transitioning to sunrise for 2 hours up until 7 AM. -->
<transition type="overlay">
<duration>7200.0</duration>
<from>/usr/share/backgrounds/gnome/Catalina-2.tiff</from>
<to>/usr/share/backgrounds/gnome/Catalina-3.tiff</to>
</transition>
</background>
EOF

============================================================
Fedora 32 Docker installation with moby-engine
============================================================
# https://github.com/docker/for-linux/issues/955#issuecomment-628407032
# https://fedoramagazine.org/docker-and-fedora-32/

# Enable old CGroups
sudo grubby --update-kernel=ALL --args="systemd.unified_cgroup_hierarchy=0"

# Allow Docker to make remote connections 
sudo firewall-cmd --permanent --zone=trusted --add-interface=docker0

# Allow Docker to make local connections
sudo firewall-cmd --permanent --zone=FedoraWorkstation --add-masquerade

# Install Moby, open source version of Docker
sudo dnf install -y moby-engine docker-compose
sudo systemctl enable docker

# Allow current user to run docker command without sudo
sudo usermod -aG docker $USER

# Reboot
sudo systemctl reboot

# Test
sudo docker run hello-world

# Changing firewalld backend from nftables to iptables: https://kind.sigs.k8s.io/docs/user/known-issues/#fedora32-firewalld
sed -i /etc/firewalld/firewalld.conf 's/FirewallBackend=.*/FirewallBackend=iptables/'
systemctl restart firewalld

============================================================
Fedora 33 Workstation installation docs
============================================================

# Docker
# ============================================================
sudo grubby --update-kernel=ALL --args="systemd.unified_cgroup_hierarchy=0"
sudo dnf install moby-engine
sudo usermod -aG docker $USER
sudo systemctl enable docker
sudo systemctl reboot

# Kind
# ============================================================
cd $(mktemp -d)
curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.9.0/kind-linux-amd64
sudo install kind /usr/local/bin/

curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
sudo install kubectl /usr/local/bin/

# Add masquerade rule to allow containers in Kind network to access internet.
# This assumes "kind" Docker network has subnet "172.18.0.0/16"
# Verify with: docker inspect kind | grep Subnet

sudo firewall-cmd --permanent --zone=FedoraWorkstation \
  --add-rich-rule="rule family=ipv4 priority=1 source address=172.18.0.0/16 masquerade"

kind create cluster
kubectl run nginx --image nginx

# Wine to install Adobe Reader
# ============================================================
sudo dnf -y install wine.i686 winetricks cabextract
export WINEARCH=win32 
winetricks mspatcha && winetricks atmlib && winetricks riched20 

# Assume we have Adobe installation .exe file
wine AcroRdrDC2000920063_en_US.exe

# Turn off Protected Mode when using Adobe Reader since it can sometimes cause
# issues.

# Also install Segoe UI.ttf font required for the font in Adobe interface
# Copy the .ttf files to $HOME/.wine/drive_c/windows/Fonts

# Change default text editor to vim
# ============================================================
sudo dnf -y install vim 
printf "\nexport EDITOR=/usr/bin/vim\n" >> ~/.bash_profile


cat <<EOF >> ~/.bash_profile
export EDITOR=/usr/bin/vim
EOF

printf "\n# Wine\nexport WINEARCH=win32\n" >> ~/.bash_profile

# Expand storage disk size.
# Resize root and home partition. Assume ext4 filesystem with LVM volume manager.
# ============================================================
# Check the physical devices and partitions
lsblk

# lsblk output
sda                               8:0    0 931.5G  0 disk  
├─sda1                            8:1    0   600M  0 part  
├─sda2                            8:2    0     1G  0 part  
└─sda3                            8:3    0 929.9G  0 part  
  ├─fedora_localhost--live-swap 253:0    0  15.7G  0 lvm   
  ├─fedora_localhost--live-home 253:1    0   400G  0 lvm   
  └─fedora_localhost--live-root 253:2    0 514.2G  0 lvm  

# If the partition is encrypted with LUKS, decrypt it first
cryptsetup luksOpen /dev/mapper/fedora_localhost--live-root root
cryptsetup luksOpen /dev/mapper/fedora_localhost--live-home home

# Check the partition has been decrypted
lsblk 

# lsblk output
sda                               8:0    0 931.5G  0 disk  
├─sda1                            8:1    0   600M  0 part  
├─sda2                            8:2    0     1G  0 part  
└─sda3                            8:3    0 929.9G  0 part  
  ├─fedora_localhost--live-swap 253:0    0  15.7G  0 lvm   
  ├─fedora_localhost--live-home 253:1    0   400G  0 lvm   
  │ └─home                      253:6    0   400G  0 crypt 
  └─fedora_localhost--live-root 253:2    0 514.2G  0 lvm   
    └─root                      253:5    0 514.2G  0 crypt

# fsck to performs check on the filesystem and fix any errors
# "y" to accept fix, "a" to accept all fixes
sudo fsck /dev/mapper/root

# Resize the root partition, decreasing its size by 120G
# lvresize will decrease the size of the logical volume (lv)
# --resize2fs opt will also resize the filesystem after resizing the lv
sudo lvresize --resizefs --size -120G /dev/fedora_localhost-live/root

# Similarly for home partition but we increase the size
sudo fsck /dev/mapper/home
sudo lvresize --resizefs --size +120G /dev/fedora_localhost-live/home

# Verify the final sizes
lsblk

# lsblk output
└─sda3                            8:3    0 929.9G  0 part  
  ├─fedora_localhost--live-swap 253:0    0  15.7G  0 lvm   
  ├─fedora_localhost--live-home 253:1    0   520G  0 lvm   
  │ └─home                      253:6    0   520G  0 crypt 
  └─fedora_localhost--live-root 253:2    0 394.2G  0 lvm   
    └─root                      253:5    0 394.2G  0 crypt

# Expand storage disk size.
# Add new physical disk to an LVM volume.
# ============================================================

# Useful disk volume commands
sudo pvdisplay
sudo vgdisplay
sudo lvdisplay

# First, check the device name for the new disk e.g nvme0n1
lsblk

# Create physical volume on the new disk /dev/nvme0n1
sudo pvcreate /dev/nvme0n1

# Verify creation
sudo lvmdiskscan -l

# Add the physical volume to an existing volume group (check w/ vgdisplay)
sudo vgextend fedora_localhost-live /dev/nvme0n1

# Extend existing logical volume with the new free space available
# "lvdisplay" to check available logical volumes
sudo lvresize --resizefs --extents +100%FREE /dev/fedora_localhost-live/home

# Confirm the disk has been added
df -h

# ============================================================

# Disable hardware terminal beep: https://superuser.com/a/15779
# Temporarily
sudo modprobe -r pcspkr 
# Permanently
echo "blacklist pcspkr" | sudo tee -a /etc/modprobe.d/blacklist

# Set default editor to vim
sudo dnf install vim-default-editor 