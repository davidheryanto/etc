Getting started apps
============================================================
- Sublime Text
- Keepassx
- Kdiff3
- Dropbox

Things for first install
============================================================
- Setup global gitignore
- Setup keyboard shortcuts
- Setup fonts (SF Mono, SF Text)
- Install Anaconda, JDK, Docker
- Install Sublime (and extensions), JetBrains Apps, Keepass2x, Dropbox, Google Chrome, Kdiff3
- RPM Fusion: 
  sudo dnf -y install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-29.noarch.rpm
- Setup terminal: hide menubar

# Open file with gnome-open on Terminal. Need to install libgnome
sudo dnf -y install libgnome

# Install development tools
sudo dnf install @development-tools

# Nice theme
https://github.com/horst3180/arc-theme

# Important after installing Dropbox
# Update no of inotify watchers, useful for dropbox daemon
echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf; sudo sysctl -p --system

============================================================
Fedora 27 and CUDA 9.0 and Tensorflow 1.5.0
============================================================

# Download specific version of CUDA: https://developer.nvidia.com/cuda-toolkit-archive
sudo bash cuda_9.0.176_384.81_linux.run --override
echo "/usr/local/cuda-9.0/lib64" >> /etc/ld.so.conf.d/cuda-9.0.conf
sudo ldconfig

# After extracting cudnn-9.1-linux-x64-v7.tgz
sudo cp cuda/include/cudnn.h /usr/local/cuda-9.0/include
sudo cp -P cuda/lib64/libcudnn* /usr/local/cuda-9.0/lib64

pip install -U tensorflow-gpu==1.5.0

============================================================
Setup GTX 750 Ti on Fedora 29
============================================================
# https://www.if-not-true-then-false.com/2015/fedora-nvidia-guide/

# Note
With SecureBoot enabled, installing the driver requires signing of the kernel modules etc
Not sure how to do it properly
Better just disable SecureBoot

# Install pre-requisites
sudo dnf -y install gcc "kernel-devel-uname-r == $(uname -r)" elfutils-libelf-devel

# Disable nouveau driver which may conflict with driver from NVidia
# https://kaischroed.wordpress.com/howto-install-nvidia-driver-on-fedora-replacing-nouveau/
echo 'blacklist nouveau' >> /etc/modprobe.d/disable-nouveau.conf

# Disable nouveau from grub
# Append rd.driver.blacklist=nouveau to end of GRUB_CMDLINE_LINUX in /etc/sysconfig/grub
vim /etc/sysconfig/grub  # Add rd.driver.blacklist=nouveau, then
grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg

# Alternatively, (above method is preferred)
# Edit grub.cfg (/boot/grub2/grub.cfg or /boot/efi/EFI/fedora/grub.cfg)
# Why? Fedora package nouveau as part of boot image
# Add rd.driver.blacklist=nouveau, e.g. 
/vmlinuz-3.6.3-1.fc17.x86_64 root=/dev/mapper/vg_fedo-lv_root ro rd.lvm.lv=vg_fedo/lv_swap rd.md=0 rd.dm=0 SYSFONT=True rd.lvm.lv=vg_fedo/lv_root rd.luks=0  KEYTABLE=es LANG=en_US.UTF-8 rd.driver.blacklist=nouveau rhgb quiet

# Reboot to runlevel 3, i.e. without desktop GUI
systemctl set-default multi-user.target; reboot

# Execute .run file
./NVIDIA-Linux-x86_64-304.60.run

# Install CUDA: https://developer.nvidia.com/cuda-downloads
# Add: /usr/local/cuda-8.0/lib64 to /etc/ld.so.conf (Alternative to LD_LIBRARY_PATH)
sudo ldconfig
# Add to .bashrc
PATH=/usr/local/cuda-8.0/bin:$PATH

# Reboot back to runlevel 5, with desktop GUI
systemctl set-default graphical.target; reboot

# To upgrade existing driver, sometimes need to unload nvidia-drm module
# https://unix.stackexchange.com/questions/440840/how-to-unload-kernel-module-nvidia-drm/441079
sudo systemctl isolate multi-user.target

# For CUDA 8.0 gcc 6 is not supported yet, need to downgrade
============================================================
# Use gcc version 5.4.0
PATH=/usr/local/gcc/5.4.0/bin:$PATH

# CUDA 
PATH=/usr/local/cuda-8.0/bin:$PATH
============================================================

# Install earlier version of gcc e.g. in Fedora 24 (install gcc 5, instead of using gcc 6)
# Make sure "make -j4" set -j to be max no of core because compiling gcc takes a long time 
# CUDA 8.0 not yet support gcc 6
# Need flex parser, texinfo to compile gcc: sudo dnf -y install flex texinfo
Download gcc 5.4: https://gcc.gnu.org/gcc-5/
./contrib/download_prerequisites
./configure --prefix=/usr/local/gcc/5.4.0 [--disable-multilib]
make -j4
sudo make install

Using older gcc
---------------
Add /usr/local/gcc/5.4.0/bin to PATH
Add /usr/local/gcc/5.4.0/lib64 to /etc/ld.so.conf 
sudo ldconfig 

Alternatively
-------------
# http://stackoverflow.com/questions/6622454/cuda-incompatible-with-my-gcc-version
sudo ln -s /usr/local/gcc/5.4.0/bin/gcc /usr/local/cuda/bin/gcc
sudo ln -s /usr/local/gcc/5.4.0/bin/g++ /usr/local/cuda/bin/g++

# Install cuDNN https://developer.nvidia.com/rdp/cudnn-download
# After extracting the archive, copy these files from cuDNN
sudo cp -av cuda/lib64/* /usr/local/cuda/lib64/  # -av preserves symbolic link
sudo cp cuda/include/* /usr/local/cuda/include/
sudo ldconfig

# May give this error: ldconfig: /usr/local/cuda-8.0/lib64/libcudnn.so.5 is not a symbolic link
# Because there are identical libcudnn.so.5 and libcudnn.so.5.1.5
sudo mv /usr/local/cuda-8.0/lib64/libcudnn.so.5 /usr/local/cuda-8.0/lib64/libcudnn.so.5.bak
sudo ln -s /usr/local/cuda-8.0/lib64/libcudnn.so.5.1.5 /usr/local/cuda-8.0/lib64/libcudnn.so.5
sudo ldconfig 

============================================================
For laptop with Optimus graphics i.e. switchable integrated & discrete gpu
-> https://superuser.com/questions/282734/how-to-disable-nvidia-optimus-on-a-dell-xps-15

Install bumblebee nvidia driver (Fedora 25):
# https://fedoraproject.org/wiki/Bumblebee
sudo dnf -y --nogpgcheck install http://install.linux.ncsu.edu/pub/yum/itecs/public/bumblebee/fedora$(rpm -E %fedora)/noarch/bumblebee-release-1.2-1.noarch.rpm
sudo dnf -y --nogpgcheck install http://install.linux.ncsu.edu/pub/yum/itecs/public/bumblebee-nonfree/fedora$(rpm -E %fedora)/noarch/bumblebee-nonfree-release-1.2-1.noarch.rpm
sudo dnf install -y bumblebee-nvidia bbswitch-dkms primus kernel-devel


sudo dnf -y --nogpgcheck install http://install.linux.ncsu.edu/pub/yum/itecs/public/bumblebee/fedora25/noarch/bumblebee-release-1.2-1.noarch.rpm
sudo dnf -y --nogpgcheck install http://install.linux.ncsu.edu/pub/yum/itecs/public/bumblebee-nonfree/fedora25/noarch/bumblebee-nonfree-release-1.2-1.noarch.rpm
sudo dnf install bumblebee-nvidia bbswitch-dkms primus kernel-devel

Add current user to 'bumblebee' group so can run optirun w/o sudo:
usermod -a -G bumblebee davidheryanto

# Usage:
optirun nvidia-smi
optirun python mnist_mlp.py (keras)

============================================================

# Theano configuration 
Flags to use gpu http://deeplearning.net/software/theano/install.html#using-the-gpu
Check if code can use gpu http://deeplearning.net/software/theano/tutorial/using_gpu.html

# In Fedora23, the default login manager gdm may have some problem
# Replace gdm with lightdm
systemctl stop gdm
systemctl disable gdm
dnf -y install lightdm
systemctl enable lightdm

# Disable Fedora Gnome auto update
/usr/bin/gsettings set org.gnome.software download-updates false

# Alternatively install dconf-editor and adjust the settings from there
sudo dnf -y install dconf-editor

# Disable PackageKit from update
sudo /usr/bin/gpk-prefs
Select 'Never'

============================================================

# Install Microsoft SQL Server: https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup-red-hat
sudo su
curl https://packages.microsoft.com/config/rhel/7/mssql-server.repo > /etc/yum.repos.d/mssql-server.repo
exit
sudo yum install -y mssql-server
sudo /opt/mssql/bin/sqlservr-setup
systemctl status mssql-server
sudo firewall-cmd --zone=public --add-port=1433/tcp --permanent
sudo firewall-cmd --reload

# Packages
texlive-latex: Latex

# G++ or gcc error:/usr/lib/rpm/redhat/redhat-hardened-cc1: No such file or directory
sudo dnf install redhat-rpm-config

# Launch settings from command line 
/usr/bin/gnome-control-center

# Enable fastest mirror for dnf / yum
# vim /etc/dnf/dnf.conf
[main]
gpgcheck=1
installonly_limit=3
clean_requirements_on_remove=True
fastestmirror=true

# Zoom or magnifier for Gnome 3
Super + Alt + 8    (Toogle zoom enabled/disabled)
Super + Alt + '+'  (Increase zoom level)
Super + Alt + '-'  (Decrease zoom level)


VLC
============================================================
Sometimes, the seeking is very slow. How to fix:
- Tools > Preferences > Video > Output: OpenGL video output

Docker 
============================================================
sudo dnf config-manager \
    --add-repo \
    https://download.docker.com/linux/fedora/docker-ce.repo
sudo dnf install docker-ce

# Sometimes if Fedora version is too new (unsupported)
vim /etc/yum.repos.d/docker-ce.repo
Then, replace $releasever to supported Fedora version


Hi-DPI Experimental Features: Fractional Scaling
============================================================
https://www.youtube.com/watch?v=yq1BRoG1JC0

sudo dnf -y install dconf-editor

> org.gnome.mutter.experimental-features
/org/gnome/mutter/experimental-features

Install Protobuf from source 
============================================================
git clone --depth=1 https://github.com/google/protobuf
sudo dnf -y install autoconf automake libtool curl make
cd protobuf && ./autogen.sh

# Use --prefix=/usr, otherwise need to set LD_LIBRARY_PATH=/usr/local/lib
./configure --prefix=/usr
make -j4
make check
sudo make install
sudo ldconfig # refresh shared library cache.

cd python
python setup.py build --cpp_implementation
python setup.py test --cpp_implementation
python setup.py install --cpp_implementation

Fedora 29: Install Docker CE
============================================================
# https://github.com/docker/for-linux/issues/430
# From F29
dnf install https://download.docker.com/linux/fedora/29/x86_64/nightly/Packages/docker-ce-cli-0.0.0.20181027050239.c7c18e3-0.fc29.x86_64.rpm
# From F28, as the docker-ce requires `containerd.io` to be installed (instead of containerd in system?)
dnf install https://download.docker.com/linux/fedora/28/x86_64/stable/Packages/containerd.io-1.2.0-2.2.rc.2.1.fc28.x86_64.rpm
# From F29
dnf install https://download.docker.com/linux/fedora/29/x86_64/nightly/Packages/docker-ce-0.0.0.20181027050239.c7c18e3-0.fc29.x86_64.rpm

# Upgrade Fedora
# https://fedoramagazine.org/upgrading-fedora-28-fedora-29/
sudo dnf upgrade --refresh
sudo dnf install dnf-plugin-system-upgrade
sudo dnf system-upgrade download --releasever=29
# If there's error with broken dependencies
# Use --allowerasing option
sudo dnf system-upgrade reboot

Sample .bashrc
============================================================
# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# To easily pipe and copy text in Terminal
alias xclip="xclip -selection c"

# Java 
export JAVA_HOME=/usr/java/jdk1.8.0_172-amd64
export PATH=$JAVA_HOME/bin:$PATH

# Golang environment: GOPATH is path to local packages, GOROOT is home path to compiler/tools
# https://golang.org/doc/code.html#GOPATH
# https://stackoverflow.com/questions/7970390/what-should-be-the-values-of-gopath-and-goroot
export GOPATH=/home/dheryanto/go
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

# Maven
export PATH=/opt/maven/bin:$PATH

# Gradle
export PATH=/opt/gradle/bin:$PATH


# Google Cloud
export PATH=/home/dheryanto/google-cloud-sdk/bin:$PATH

# Node.js
export PATH=/home/dheryanto/node.js/bin:$PATH

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# added by Anaconda3 installer
export PATH="/home/dheryanto/anaconda3/bin:$PATH"

# Wine
export WINEARCH=win32

# DNS resolver service
sudo systemctl start systemd-resolved